{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JSL - JSON Serializable Language","text":""},{"location":"#a-network-native-functional-programming-language","title":"A Network-Native Functional Programming Language","text":"<p>JSL is a Lisp-like functional programming language designed from the ground up for network transmission and distributed computing. Unlike traditional languages that treat serialization as an afterthought, JSL makes wire-format compatibility a first-class design principle.</p> <p>In an era of distributed systems and microservices, JSL addresses common challenges in code mobility, runtime dependencies, and cross-platform interoperability by treating JSON as the canonical representation for both data and code.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd04 Network-Native: Every JSL program is valid JSON that can be transmitted over networks</li> <li>\ud83d\udd12 Secure by Design: Host environment controls all capabilities and side effects</li> <li>\ud83d\udce6 Closure Serializability: Functions with captured environments can be serialized and reconstructed</li> <li>\ud83c\udfaf Homoiconic: Code and data share the same JSON representation</li> <li>\u26a1 Deterministic: Core language evaluation is predictable and reproducible</li> <li>\ud83d\udd27 Extensible: Built-in prelude provides practical functionality</li> <li>\ud83c\udfd7\ufe0f First-Class Objects: JSON objects are native data structures with dynamic construction support</li> </ul>"},{"location":"#core-design-principles","title":"Core Design Principles","text":"<p>JSL is built upon fundamental principles that guide every aspect of its design:</p> <ul> <li>JSON as Code and Data: All JSL programs and data structures are representable as standard JSON. This ensures universal parsing, generation, and compatibility with a vast ecosystem of tools and platforms.</li> <li>Network-Native: The language is designed for seamless transmission over networks. Its serialization format is inherently web-friendly and requires no complex marshalling/unmarshalling beyond standard JSON processing.</li> <li>Serializable Closures: JSL provides a mechanism for serializing closures, including their lexical environments (user-defined bindings), allowing functions to be truly mobile.</li> <li>Effect Reification: Side-effects are not executed directly within the core language evaluation but are described as data structures, allowing host environments to control, audit, or modify them.</li> <li>Deterministic Evaluation: The core JSL evaluation (excluding host interactions) is deterministic, facilitating testing, debugging, and predictable behavior.</li> <li>Security through Capability Restriction: The host environment governs the capabilities available to JSL programs, particularly for side-effecting operations.</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>// Define and call a factorial function using a local binding\n[\"let\", [\n  [\"factorial\", \n    [\"lambda\", [\"n\"], \n      [\"if\", [\"&lt;=\", \"n\", 1], \n        1, \n        [\"*\", \"n\", [\"factorial\", [\"-\", \"n\", 1]]]\n      ]\n    ]\n  ]\n],\n  [\"factorial\", 5]\n]\n// \u2192 120\n</code></pre> <p>This JSL program:</p> <ol> <li>Is valid JSON - can be stored, transmitted, and parsed by any JSON-compliant system</li> <li>Defines a function - creates a recursive factorial function</li> <li>Captures closures - the function can be serialized with its environment</li> <li>Produces a result - evaluates to 120</li> </ol>"},{"location":"#theoretical-foundations","title":"Theoretical Foundations","text":"<p>JSL draws inspiration from several key concepts in computer science and programming language theory:</p> <ul> <li>Homoiconicity: Like Lisp, JSL code and data share the same structural representation. However, JSL uses JSON arrays and objects instead of S-expressions, leveraging JSON's widespread adoption and strict schema.</li> <li>Lexical Scoping and Closures: JSL employs lexical scoping. Functions (<code>lambda</code> forms) can capture variables from their surrounding lexical environments, forming closures. The serialization mechanism is designed to preserve these captured environments.</li> <li>Functional Programming: JSL encourages a functional programming style, emphasizing immutability, first-class functions, and expressions over statements.</li> <li>Separation of Pure Computation and Effects: The core JSL interpreter deals with pure computation. Interactions with the external world (I/O, system calls) are managed via the JSL Host Interaction Protocol (JHIP), where effects are requested as data.</li> </ul>"},{"location":"#why-jsl","title":"Why JSL?","text":""},{"location":"#the-problem-with-traditional-code-mobility","title":"The Problem with Traditional Code Mobility","text":"<p>Modern distributed systems need to move code between services, store executable logic in databases, and update running systems dynamically. Traditional approaches face fundamental limitations:</p> <ul> <li>Serialization brittleness - Complex frameworks that break across versions</li> <li>Runtime dependencies - Code tied to specific environments and libraries  </li> <li>Security vulnerabilities - Deserializing arbitrary code creates attack vectors</li> <li>Platform lock-in - Language-specific formats prevent interoperability</li> </ul>"},{"location":"#the-jsl-solution","title":"The JSL Solution","text":"<p>JSL solves these problems by making JSON the native representation for both code and data:</p> <ul> <li>Universal compatibility - Works with any system that supports JSON</li> <li>Intrinsic safety - Transmitted code contains no executable primitives</li> <li>Runtime independence - Compatible prelude provides computational foundation</li> <li>Cross-platform - Language-agnostic JSON representation</li> </ul>"},{"location":"#use-cases","title":"Use Cases","text":"<p>JSL's design makes it suitable for a variety of applications:</p> <ul> <li>Distributed Computing: Send computations to where data resides, reducing network overhead and improving performance</li> <li>Edge Computing: Deploy and update logic on edge devices dynamically without full redeployment</li> <li>Serverless Functions / FaaS: Represent functions as JSON, simplifying deployment and management</li> <li>Database Functions: Store and execute business logic directly in databases in a portable format  </li> <li>Microservice Communication: Share functional components across service boundaries with guaranteed compatibility</li> <li>Code as Configuration: Express complex configurations as executable programs that can be validated and tested</li> <li>Workflow Automation: Define complex workflows as JSL programs that can be stored, versioned, and executed anywhere</li> <li>Plugin Systems: Allow users to extend applications with sandboxed, serializable plugins</li> <li>Live Programming: Update running systems by transmitting new code without service interruption</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<ol> <li>Getting Started - Set up JSL in your environment and learn the basics.</li> <li>Language Guide - Learn the syntax and semantics</li> <li>Tutorials - Step-by-step examples</li> </ol>"},{"location":"#architecture-overview","title":"Architecture Overview","text":"<p>JSL consists of three layers:</p> <ol> <li>Prelude Layer - Non-serializable built-in functions that form the computational foundation</li> <li>User Layer - Serializable functions and data defined by user programs  </li> <li>Wire Layer - JSON representation for transmission and storage</li> </ol> <p>This separation ensures transmitted code is always safe while remaining fully functional when reconstructed with a compatible prelude.</p>"},{"location":"#learn-more","title":"Learn More","text":"<ul> <li>Design Philosophy - Theoretical foundations and principles</li> <li>AST Specification - Formal language syntax definition</li> <li>JHIP Protocol - Host interaction for side effects</li> <li>API Reference - Complete function documentation</li> </ul>"},{"location":"getting-started/","title":"Getting Started with JSL","text":"<p>This guide provides a concise introduction to JSL to get you up and running in minutes. JSL is a lightweight, functional programming language that uses JSON for its syntax, making it ideal for data manipulation, configuration, and network-native applications.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>JSL requires Python 3.8 or later.</p>"},{"location":"getting-started/#from-source","title":"From Source","text":"<p>Clone the repository and install JSL using pip:</p> <pre><code>git clone https://github.com/queelius/jsl.git\ncd jsl\npip install -e .\n</code></pre>"},{"location":"getting-started/#verify-installation","title":"Verify Installation","text":"<p>You can verify the installation by running a simple program or by starting the interactive REPL:</p> <pre><code># Run a simple JSL program from the command line\necho '[\"print\", \"@Hello, JSL!\"]' | jsl\n\n# Start the interactive REPL\njsl --repl\n</code></pre>"},{"location":"getting-started/#your-first-jsl-program","title":"Your First JSL Program","text":"<p>JSL programs are simply JSON data structures. Create a file named <code>hello.jsl</code> with the following content:</p> <pre><code>[\"print\", \"@Hello, World!\"]\n</code></pre> <p>Execute it from your terminal:</p> <pre><code>jsl hello.jsl\n</code></pre> <p>You should see the output: <code>Hello, World!</code></p> <p>Note on File Extensions We recommend using the <code>.jsl</code> extension for your JSL program files. This helps distinguish them from regular JSON data files and allows for better editor integration. However, the <code>jsl</code> interpreter will happily run files with a <code>.json</code> extension, preserving the principle that all JSL code is valid JSON.</p>"},{"location":"getting-started/#core-concepts","title":"Core Concepts","text":""},{"location":"getting-started/#literals-and-variables","title":"Literals and Variables","text":"<p>Standard JSON literals like numbers, booleans, and <code>null</code> evaluate to themselves. Strings are used for both literal text and variable references. A string with an <code>@</code> prefix is a literal, while a string without it is treated as a variable.</p> <pre><code>42          // A number\n\"@hello\"    // A string literal\n\"my_variable\" // A reference to a variable\n</code></pre>"},{"location":"getting-started/#basic-operations","title":"Basic Operations","text":"<p>JSL uses prefix notation (like Lisp) for function calls. The first element of an array is the function to be called, and the rest are its arguments.</p> <pre><code>[\"+\", 1, 2, 3]\n</code></pre> <p>This expression evaluates to <code>6</code>.</p>"},{"location":"getting-started/#defining-variables-and-functions","title":"Defining Variables and Functions","text":"<p>You can define variables with <code>def</code> and functions with <code>lambda</code>. The <code>do</code> special form lets you execute a sequence of expressions.</p> <pre><code>[\n  \"do\",\n  [\"def\", \"x\", 10],\n  [\"def\", \"square\", [\"lambda\", [\"n\"], [\"*\", \"n\", \"n\"]]],\n  [\"square\", \"x\"]\n]\n</code></pre> <p>This evaluates to <code>100</code>.</p>"},{"location":"getting-started/#conditional-logic","title":"Conditional Logic","text":"<p>The <code>if</code> special form provides conditional evaluation:</p> <pre><code>[\"if\", [\"&gt;\", 5, 3], \"@Greater\", \"@Less\"]\n</code></pre> <p>This evaluates to <code>\"Greater\"</code>.</p>"},{"location":"getting-started/#a-quick-example-fibonacci","title":"A Quick Example: Fibonacci","text":"<p>Here is a more complete example that defines a recursive function to compute Fibonacci numbers and then applies it to a list of numbers:</p> <pre><code>[\n  \"do\",\n  [\"def\", \"fib\",\n   [\"lambda\", [\"n\"],\n    [\"if\", [\"&lt;=\", \"n\", 1],\n     \"n\",\n     [\"+\", [\"fib\", [\"-\", \"n\", 1]], [\"fib\", [\"-\", \"n\", 2]]]]]],\n  [\"map\", \"fib\", [\"list\", 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]\n]\n</code></pre>"},{"location":"getting-started/#running-jsl-code","title":"Running JSL Code","text":"<p>You can run JSL programs in several ways:</p> <ul> <li>From a file: <code>jsl your_program.jsl</code></li> <li>From standard input: <code>echo '[\"+\", 1, 2]' | jsl</code></li> <li>Using the REPL: <code>jsl --repl</code></li> <li>As a web service: <code>jsl --service</code></li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have a basic understanding of JSL, you can explore the following sections for more in-depth information:</p> <ul> <li>Language Guide: For a comprehensive overview of JSL's syntax and semantics.</li> <li>Tutorials: For guided, step-by-step lessons.</li> <li>Examples: For a collection of practical, real-world examples.</li> </ul>"},{"location":"api/core/","title":"Core Module API Reference","text":"<p>The core module (<code>jsl.core</code>) provides the fundamental data structures and environment management for JSL.</p>"},{"location":"api/core/#classes","title":"Classes","text":""},{"location":"api/core/#env","title":"<code>Env</code>","text":"<p>The environment class manages variable bindings and scope chains.</p>"},{"location":"api/core/#jsl.core.Env","title":"<code>jsl.core.Env(bindings=None, parent=None)</code>","text":"<p>Represents a JSL environment - a scope containing variable bindings.</p> <p>Environments form a chain: each environment has an optional parent. When looking up a variable, we search the current environment first, then its parent, and so on until we find it or reach the root.</p> Source code in <code>jsl/core.py</code> <pre><code>def __init__(self, bindings: Optional[Dict[str, Any]] = None, parent: Optional['Env'] = None):\n    self.bindings = bindings or {}\n    self.parent = parent\n</code></pre>"},{"location":"api/core/#jsl.core.Env.content_hash","title":"<code>content_hash()</code>","text":"<p>Generate a content-addressable hash for this environment.</p> Source code in <code>jsl/core.py</code> <pre><code>def content_hash(self) -&gt; str:\n    \"\"\"Generate a content-addressable hash for this environment.\"\"\"\n    # Create a canonical representation for hashing\n    canonical = {\n        \"bindings\": self._serialize_bindings(),\n        \"parent_hash\": self.parent.content_hash() if self.parent else None\n    }\n    content = json.dumps(canonical, sort_keys=True)\n    return hashlib.sha256(content.encode()).hexdigest()\n</code></pre>"},{"location":"api/core/#jsl.core.Env.define","title":"<code>define(name, value)</code>","text":"<p>Define a variable in this environment.</p> Source code in <code>jsl/core.py</code> <pre><code>def define(self, name: str, value: Any) -&gt; None:\n    \"\"\"Define a variable in this environment.\"\"\"\n    self.bindings[name] = value\n</code></pre>"},{"location":"api/core/#jsl.core.Env.extend","title":"<code>extend(new_bindings)</code>","text":"<p>Create a new environment that extends this one with additional bindings.</p> Source code in <code>jsl/core.py</code> <pre><code>def extend(self, new_bindings: Dict[str, Any]) -&gt; 'Env':\n    \"\"\"Create a new environment that extends this one with additional bindings.\"\"\"\n    return Env(new_bindings, parent=self)\n</code></pre>"},{"location":"api/core/#jsl.core.Env.get","title":"<code>get(name)</code>","text":"<p>Look up a variable in this environment or its parents.</p> Source code in <code>jsl/core.py</code> <pre><code>def get(self, name: str) -&gt; Any:\n    \"\"\"Look up a variable in this environment or its parents.\"\"\"\n    if name in self.bindings:\n        return self.bindings[name]\n    elif self.parent:\n        return self.parent.get(name)\n    else:\n        raise SymbolNotFoundError(f\"Symbol '{name}' not found\")\n</code></pre>"},{"location":"api/core/#jsl.core.Env.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert environment bindings to a dictionary (for serialization).</p> Source code in <code>jsl/core.py</code> <pre><code>def to_dict(self) -&gt; Dict[str, Any]:\n    \"\"\"Convert environment bindings to a dictionary (for serialization).\"\"\"\n    result = {}\n    if self.parent:\n        result.update(self.parent.to_dict())\n    result.update(self.bindings)\n    return result\n</code></pre>"},{"location":"api/core/#closure","title":"<code>Closure</code>","text":"<p>Represents a user-defined function with captured lexical environment.</p>"},{"location":"api/core/#jsl.core.Closure","title":"<code>jsl.core.Closure(params, body, env)</code>  <code>dataclass</code>","text":"<p>Represents a JSL function (closure).</p> <p>A closure captures three things: 1. The parameter names it expects 2. The body expression to evaluate when called 3. The environment where it was defined (lexical scoping)</p>"},{"location":"api/core/#jsl.core.Closure.__call__","title":"<code>__call__(evaluator, args)</code>","text":"<p>Apply this closure to the given arguments.</p> Source code in <code>jsl/core.py</code> <pre><code>def __call__(self, evaluator: 'Evaluator', args: List[JSLValue]) -&gt; JSLValue:\n    \"\"\"Apply this closure to the given arguments.\"\"\"\n    if len(args) != len(self.params):\n        raise JSLTypeError(f\"Function expects {len(self.params)} arguments, got {len(args)}\")\n\n    # Create new environment extending the closure's captured environment\n    call_env = self.env.extend(dict(zip(self.params, args)))\n    return evaluator.eval(self.body, call_env)\n</code></pre>"},{"location":"api/core/#global-state","title":"Global State","text":""},{"location":"api/core/#prelude","title":"<code>prelude</code>","text":"<p>The global prelude environment containing all built-in functions.</p> <pre><code>from jsl.core import prelude\n\n# Access built-in functions\nplus_func = prelude.get(\"+\")\nmap_func = prelude.get(\"map\")\n</code></pre>"},{"location":"api/core/#environment-management","title":"Environment Management","text":"<p>The core module handles environment chaining and variable resolution:</p> <pre><code>from jsl.core import Env\n\n# Create a new environment\nenv = Env({\"x\": 10, \"y\": 20})\n\n# Create child environment  \nchild_env = env.extend({\"z\": 30})\n\n# Variable resolution follows the chain\nprint(child_env.get(\"x\"))  # 10 (from parent)\nprint(child_env.get(\"z\"))  # 30 (from child)\n</code></pre>"},{"location":"api/core/#closure-creation","title":"Closure Creation","text":"<p>Closures capture their defining environment:</p> <pre><code>from jsl.core import Closure, Env\n\n# Create environment\nenv = Env({\"multiplier\": 3})\n\n# Create closure that captures the environment\nclosure = Closure(\n    params=[\"x\"],\n    body=[\"*\", \"multiplier\", \"x\"],\n    env=env\n)\n\n# The closure remembers the 'multiplier' value\n</code></pre>"},{"location":"api/core/#implementation-details","title":"Implementation Details","text":""},{"location":"api/core/#environment-chains","title":"Environment Chains","text":"<p>JSL uses environment chains for variable resolution:</p> <ol> <li>Current Environment: Look for variable in current scope</li> <li>Parent Environment: If not found, check parent scope  </li> <li>Continue Chain: Repeat until variable found or chain ends</li> <li>Prelude Access: All chains eventually reach the global prelude</li> </ol>"},{"location":"api/core/#closure-serialization","title":"Closure Serialization","text":"<p>Closures are designed for safe serialization:</p> <ul> <li>Parameters: Always serializable (list of strings)</li> <li>Body: Always serializable (JSON expression)</li> <li>Environment: Only user-defined bindings are serialized</li> <li>Prelude: Built-in functions are reconstructed, not serialized</li> </ul> <p>This ensures transmitted closures are safe and can be reconstructed in any compatible JSL runtime.</p>"},{"location":"api/core/#core-data-structures","title":"Core Data Structures","text":""},{"location":"api/core/#overview","title":"Overview","text":"<p>The <code>jsl.core</code> module provides the fundamental data structures that represent the state of a JSL program: <code>Env</code> for environments and <code>Closure</code> for functions. These are the building blocks used by the Evaluator and managed by the JSLRunner.</p>"},{"location":"api/core/#env_1","title":"<code>Env</code>","text":"<p>The <code>Env</code> class implements the JSL environment, a dictionary-like object that maps variable names to values and links to a parent environment to form a scope chain.</p>"},{"location":"api/core/#key-concepts","title":"Key Concepts","text":"<ul> <li>Scope Chain: When looking up a variable, if it's not found in the current <code>Env</code>, the search continues up to its parent, and so on, until the root <code>prelude</code> is reached.</li> <li>Immutability: Methods like <code>extend</code> create a new child environment rather than modifying the parent, preserving functional purity.</li> </ul> <pre><code>from jsl.core import Env\n\n# Create a new environment\nenv = Env({\"x\": 10, \"y\": 20})\n\n# Create a child environment that inherits from the parent\nchild_env = env.extend({\"z\": 30})\n\n# Variable resolution follows the chain\n# print(child_env.get(\"x\")) -&gt; 10 (from parent)\n# print(child_env.get(\"z\")) -&gt; 30 (from child)\n</code></pre>"},{"location":"api/core/#closure_1","title":"<code>Closure</code>","text":"<p>The <code>Closure</code> class represents a JSL function. It packages the function's code (parameters and body) with a reference to the environment in which it was defined. This \"closing over\" of the environment is what allows lexical scoping to work.</p> <pre><code>from jsl.core import Closure, Env\n\n# Create an environment that the closure will capture\nenv = Env({\"multiplier\": 3})\n\n# Create a closure that captures the 'multiplier' variable from its environment\nclosure = Closure(\n    params=[\"x\"],\n    body=[\"*\", \"multiplier\", \"x\"],\n    env=env\n)\n</code></pre>"},{"location":"api/core/#prelude_1","title":"<code>prelude</code>","text":"<p>A global, read-only instance of <code>Env</code> that contains all the JSL built-in functions (e.g., <code>+</code>, <code>map</code>, <code>get</code>). It serves as the ultimate parent of all other environments.</p>"},{"location":"api/evaluator/","title":"Evaluator API Reference","text":"<p>The core module (<code>jsl.core</code>) contains the main evaluation engine for JSL expressions.</p>"},{"location":"api/evaluator/#main-evaluator-class","title":"Main Evaluator Class","text":""},{"location":"api/evaluator/#evaluator","title":"Evaluator","text":"<p>The main evaluator class for JSL expressions.</p>"},{"location":"api/evaluator/#jsl.core.Evaluator","title":"<code>jsl.core.Evaluator(host_dispatcher=None)</code>","text":"<p>The core JSL evaluator - the \"engine\" of the language.</p> <p>This class implements the evaluation rules for JSL expressions. It handles special forms and delegates host interactions to the dispatcher.</p> Source code in <code>jsl/core.py</code> <pre><code>def __init__(self, host_dispatcher: Optional[HostDispatcher] = None):\n    self.host = host_dispatcher or HostDispatcher()\n</code></pre>"},{"location":"api/evaluator/#jsl.core.Evaluator.eval","title":"<code>eval(expr, env)</code>","text":"<p>Evaluate a JSL expression in the given environment.</p> <p>This is the core of the language - it implements the evaluation rules that determine what each JSL construct means.</p> Source code in <code>jsl/core.py</code> <pre><code>def eval(self, expr: JSLExpression, env: Env) -&gt; JSLValue:\n    \"\"\"\n    Evaluate a JSL expression in the given environment.\n\n    This is the core of the language - it implements the evaluation\n    rules that determine what each JSL construct means.\n    \"\"\"\n    # Literals: numbers, booleans, null, objects\n    if isinstance(expr, (int, float, bool)) or expr is None:\n        return expr\n\n    # Objects: evaluate both keys and values, keys must be strings\n    if isinstance(expr, dict):\n        result = {}\n        for key_expr, value_expr in expr.items():\n            # Evaluate key - must result in a string\n            key_result = self.eval(key_expr, env)\n            if not isinstance(key_result, str):\n                raise JSLTypeError(f\"Object key must evaluate to string, got {type(key_result)}: {key_result}\")\n\n            # Evaluate value\n            value_result = self.eval(value_expr, env)\n            result[key_result] = value_result\n        return result\n\n    # Strings: variables or string literals\n    if isinstance(expr, str):\n        return self._eval_string(expr, env)\n\n    # Arrays: function calls or special forms\n    if isinstance(expr, list):\n        return self._eval_list(expr, env)\n\n    raise JSLTypeError(f\"Cannot evaluate expression of type {type(expr)}\")\n</code></pre>"},{"location":"api/evaluator/#overview","title":"Overview","text":"<p>The evaluator implements JSL's core evaluation semantics:</p> <ul> <li>Expressions: Everything in JSL is an expression that evaluates to a value</li> <li>Environments: Lexical scoping with nested environment chains  </li> <li>Host Commands: Bidirectional communication with the host system</li> <li>Tail Call Optimization: Efficient recursion handling</li> </ul>"},{"location":"api/evaluator/#evaluation-rules","title":"Evaluation Rules","text":""},{"location":"api/evaluator/#literals","title":"Literals","text":"<ul> <li>Numbers: <code>42</code>, <code>3.14</code> evaluate to themselves</li> <li>Strings: <code>\"@hello\"</code> evaluates to the literal string <code>\"hello\"</code></li> <li>Booleans: <code>true</code>, <code>false</code> evaluate to themselves</li> <li>null: <code>null</code> evaluates to itself</li> </ul>"},{"location":"api/evaluator/#variables","title":"Variables","text":"<p>Variable references are resolved through the environment chain:</p> <pre><code>[\"let\", {\"x\": 42}, \"x\"]\n</code></pre>"},{"location":"api/evaluator/#special-forms","title":"Special Forms","text":"<ul> <li><code>let</code>: Creates local bindings</li> <li><code>def</code>: Defines variables in the current environment</li> <li><code>lambda</code>: Creates function closures</li> <li><code>if</code>: Conditional evaluation</li> <li><code>do</code>: Sequential execution</li> <li><code>quote</code>: Prevents evaluation</li> <li><code>host</code>: Executes host commands</li> </ul>"},{"location":"api/evaluator/#function-calls","title":"Function Calls","text":"<p>Regular function calls use list syntax:</p> <pre><code>[\"func\", \"arg1\", \"arg2\"]\n</code></pre> <p>Where <code>func</code> evaluates to a callable (function or closure).</p>"},{"location":"api/evaluator/#objects","title":"Objects","text":"<p>Objects are evaluated by evaluating all key-value pairs:</p> <pre><code>{\"key\": \"value\", \"computed\": [\"add\", 1, 2]}\n</code></pre> <p>Keys must evaluate to strings, values can be any JSL expression.</p>"},{"location":"api/evaluator/#error-handling","title":"Error Handling","text":"<p>The evaluator provides detailed error information including:</p> <ul> <li>Expression context</li> <li>Environment state</li> <li>Call stack trace</li> <li>Host command failures</li> </ul>"},{"location":"api/evaluator/#security","title":"Security","text":"<p>The evaluator includes security measures:</p> <ul> <li>Sandboxing: Host commands are controlled by the dispatcher</li> <li>Resource Limits: Evaluation depth and memory usage controls</li> <li>Safe Evaluation: No access to Python internals by default</li> </ul>"},{"location":"api/evaluator/#usage-examples","title":"Usage Examples","text":""},{"location":"api/evaluator/#basic-evaluation","title":"Basic Evaluation","text":"<pre><code>from jsl.core import Evaluator, Env\n\nevaluator = Evaluator()\nenv = Env()\n\n# Evaluate a simple expression\nresult = evaluator.eval([\"+\", 1, 2], env)\nprint(result)  # 3\n</code></pre>"},{"location":"api/evaluator/#with-variables","title":"With Variables","text":"<pre><code># Define a variable\nevaluator.eval([\"def\", \"x\", 42], env)\n\n# Use the variable\nresult = evaluator.eval([\"*\", \"x\", 2], env)\nprint(result)  # 84\n</code></pre>"},{"location":"api/evaluator/#function-definition-and-call","title":"Function Definition and Call","text":"<pre><code># Define a function\nevaluator.eval([\"def\", \"square\", [\"lambda\", [\"x\"], [\"*\", \"x\", \"x\"]]], env)\n\n# Call the function\nresult = evaluator.eval([\"square\", 5], env)\nprint(result)  # 25\n</code></pre>"},{"location":"api/evaluator/#host-commands","title":"Host Commands","text":"<pre><code>from jsl.core import HostDispatcher\n\n# Create a dispatcher with custom commands\ndispatcher = HostDispatcher()\ndispatcher.register(\"print\", lambda args: print(*args))\n\nevaluator = Evaluator(host_dispatcher=dispatcher)\n\n# Execute a host command\nevaluator.eval([\"host\", \"print\", \"@Hello, World!\"], env)\n</code></pre>"},{"location":"api/evaluator/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/evaluator/#tail-call-optimization","title":"Tail Call Optimization","text":"<p>The evaluator optimizes tail calls to prevent stack overflow in recursive functions.</p>"},{"location":"api/evaluator/#memory-management","title":"Memory Management","text":"<ul> <li>Environments use reference counting</li> <li>Closures are garbage collected when no longer referenced</li> <li>Host commands can implement resource limits</li> </ul>"},{"location":"api/evaluator/#caching","title":"Caching","text":"<ul> <li>Function closures cache their compiled form</li> <li>Environment lookups are optimized for common patterns</li> <li>Object evaluation caches key-value pairs when possible</li> </ul>"},{"location":"api/fluent/","title":"Fluent Python API","text":""},{"location":"api/fluent/#overview","title":"Overview","text":"<p>The JSL Fluent Python API provides a Pythonic way to build JSL expressions. It is designed for developers who want to leverage JSL's power within a Python environment, combining Python's scripting capabilities with JSL's safe, functional, and serializable core.</p> <p>The Fluent API does not execute code; it constructs the JSL data structures (lists and dictionaries) that you can then pass to an execution engine like the JSLRunner.</p>"},{"location":"api/fluent/#core-concepts","title":"Core Concepts","text":"<ol> <li>Pythonic Expression Building: Construct complex JSL expressions using method chaining and operator overloading.</li> <li>Immutability: Every operation on a fluent object returns a new object representing a new JSL expression.</li> <li>Lazy Construction: Expressions are built as Python objects; they are not evaluated until passed to a runner.</li> </ol>"},{"location":"api/fluent/#getting-started-e-and-v","title":"Getting Started: <code>E</code> and <code>V</code>","text":"<p>The two fundamental building blocks are <code>E</code> (Expression builder) and <code>V</code> (Variable builder).</p> <pre><code>from jsl.fluent import E, V\nimport jsl\n\n# Use the Expression builder E for function calls\nexpr_e = E.add(1, 2, 3)\n# Represents the JSL: [\"+\", 1, 2, 3]\n\n# Use the Variable builder V for variable references\nexpr_v = V.x + V.y\n# Represents the JSL: [\"+\", \"x\", \"y\"]\n\n# Use the JSLRunner to execute the expression\nrunner = jsl.JSLRunner()\nrunner.define(\"x\", 10)\nrunner.define(\"y\", 20)\nprint(runner.execute(expr_v)) # Output: 30\n</code></pre>"},{"location":"api/fluent/#method-chaining-and-pipelines","title":"Method Chaining and Pipelines","text":"<p>For linear sequences of operations, the fluent API supports method chaining, creating a clean, readable pipeline.</p> <pre><code>from jsl.fluent import E, V\nimport jsl\n\n# Define a pipeline using method chaining\npipeline = E.list(1, 2, 3, 4, 5, 6).map(\n    E.lambda_(\"n\", V.n * 2)\n).filter(\n    E.lambda_(\"n\", V.n &gt; 5)\n)\n\n# The `pipeline` object now represents a complex, nested JSL expression.\n# Pass it to a runner to execute it.\nrunner = jsl.JSLRunner()\nprint(runner.execute(pipeline)) # Output: [6, 8, 10, 12]\n</code></pre>"},{"location":"api/runner/","title":"Runner API","text":""},{"location":"api/runner/#overview","title":"Overview","text":"<p>The JSL Runner API provides the core execution engine for JSL programs, handling evaluation, environment management, and host interaction coordination.</p>"},{"location":"api/runner/#core-classes","title":"Core Classes","text":"<p>JSL Runner - High-level execution interface</p> <p>This module provides the JSLRunner class and related utilities for executing JSL programs with advanced features like environment management, host interaction, and performance monitoring.</p>"},{"location":"api/runner/#jsl.runner.JSLRunner","title":"<code>JSLRunner(config=None, security=None)</code>","text":"<p>High-level JSL execution engine with advanced features.</p> <p>Initialize JSL runner.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Optional[Dict[str, Any]]</code> <p>Configuration options (recursion depth, debugging, etc.)</p> <code>None</code> <code>security</code> <code>Optional[Dict[str, Any]]</code> <p>Security settings (allowed commands, sandbox mode, etc.)</p> <code>None</code> Source code in <code>jsl/runner.py</code> <pre><code>def __init__(self, config: Optional[Dict[str, Any]] = None, security: Optional[Dict[str, Any]] = None):\n    \"\"\"\n    Initialize JSL runner.\n\n    Args:\n        config: Configuration options (recursion depth, debugging, etc.)\n        security: Security settings (allowed commands, sandbox mode, etc.)\n    \"\"\"\n    self.config = config or {}\n    self.security = security or {}\n\n    # Set up host dispatcher\n    self.host_dispatcher = HostDispatcher()\n\n    # Set up base environment\n    self.base_environment = make_prelude()\n\n    # Set up evaluator\n    self.evaluator = Evaluator(self.host_dispatcher)\n\n    # Performance tracking\n    self._profiling_enabled = False\n    self._performance_stats = {}\n\n    # Apply configuration\n    self._apply_config()\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.add_host_handler","title":"<code>add_host_handler(command, handler)</code>","text":"<p>Add a host command handler.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>Command name (e.g., \"file\", \"time\")</p> required <code>handler</code> <code>Any</code> <p>Handler object or function</p> required Source code in <code>jsl/runner.py</code> <pre><code>def add_host_handler(self, command: str, handler: Any) -&gt; None:\n    \"\"\"\n    Add a host command handler.\n\n    Args:\n        command: Command name (e.g., \"file\", \"time\")\n        handler: Handler object or function\n    \"\"\"\n    # Check security restrictions\n    allowed_commands = self.security.get('allowed_host_commands')\n    if allowed_commands and command not in allowed_commands:\n        raise JSLRuntimeError(f\"Host command '{command}' not allowed by security policy\")\n\n    self.host_dispatcher.register(command, handler)\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.conditional","title":"<code>conditional(condition, then_expr, else_expr=None)</code>","text":"<p>Execute conditional expression.</p> <p>Parameters:</p> Name Type Description Default <code>condition</code> <code>JSLExpression</code> <p>Condition to evaluate</p> required <code>then_expr</code> <code>JSLExpression</code> <p>Expression to evaluate if condition is truthy</p> required <code>else_expr</code> <code>JSLExpression</code> <p>Expression to evaluate if condition is falsy</p> <code>None</code> <p>Returns:</p> Type Description <code>JSLValue</code> <p>Result of the appropriate branch</p> Source code in <code>jsl/runner.py</code> <pre><code>def conditional(self, condition: JSLExpression, then_expr: JSLExpression, else_expr: JSLExpression = None) -&gt; JSLValue:\n    \"\"\"\n    Execute conditional expression.\n\n    Args:\n        condition: Condition to evaluate\n        then_expr: Expression to evaluate if condition is truthy\n        else_expr: Expression to evaluate if condition is falsy\n\n    Returns:\n        Result of the appropriate branch\n    \"\"\"\n    if else_expr is None:\n        else_expr = None\n    return self.execute([\"if\", condition, then_expr, else_expr])\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.create_lambda","title":"<code>create_lambda(params, body)</code>","text":"<p>Create a lambda function.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>List[str]</code> <p>Parameter names</p> required <code>body</code> <code>JSLExpression</code> <p>Function body expression</p> required <p>Returns:</p> Type Description <code>JSLValue</code> <p>Function closure</p> Source code in <code>jsl/runner.py</code> <pre><code>def create_lambda(self, params: List[str], body: JSLExpression) -&gt; JSLValue:\n    \"\"\"\n    Create a lambda function.\n\n    Args:\n        params: Parameter names\n        body: Function body expression\n\n    Returns:\n        Function closure\n    \"\"\"\n    return self.execute([\"lambda\", params, body])\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.define","title":"<code>define(name, value)</code>","text":"<p>Define a variable in the base environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Variable name</p> required <code>value</code> <code>Any</code> <p>Variable value</p> required Source code in <code>jsl/runner.py</code> <pre><code>def define(self, name: str, value: Any) -&gt; None:\n    \"\"\"\n    Define a variable in the base environment.\n\n    Args:\n        name: Variable name\n        value: Variable value\n    \"\"\"\n    self.base_environment.define(name, value)\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.define_function","title":"<code>define_function(name, params, body)</code>","text":"<p>Define a function using the lambda special form.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Function name</p> required <code>params</code> <code>List[str]</code> <p>Parameter names</p> required <code>body</code> <code>JSLExpression</code> <p>Function body expression</p> required Source code in <code>jsl/runner.py</code> <pre><code>def define_function(self, name: str, params: List[str], body: JSLExpression) -&gt; None:\n    \"\"\"\n    Define a function using the lambda special form.\n\n    Args:\n        name: Function name\n        params: Parameter names\n        body: Function body expression\n    \"\"\"\n    lambda_expr = [\"lambda\", params, body]\n    self.define(name, self.execute(lambda_expr))\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.do_sequence","title":"<code>do_sequence(*expressions)</code>","text":"<p>Execute expressions in sequence.</p> <p>Parameters:</p> Name Type Description Default <code>*expressions</code> <code>JSLExpression</code> <p>Expressions to execute in order</p> <code>()</code> <p>Returns:</p> Type Description <code>JSLValue</code> <p>Result of the last expression</p> Source code in <code>jsl/runner.py</code> <pre><code>def do_sequence(self, *expressions: JSLExpression) -&gt; JSLValue:\n    \"\"\"\n    Execute expressions in sequence.\n\n    Args:\n        *expressions: Expressions to execute in order\n\n    Returns:\n        Result of the last expression\n    \"\"\"\n    return self.execute([\"do\"] + list(expressions))\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.enable_profiling","title":"<code>enable_profiling()</code>","text":"<p>Enable performance profiling.</p> Source code in <code>jsl/runner.py</code> <pre><code>def enable_profiling(self) -&gt; None:\n    \"\"\"Enable performance profiling.\"\"\"\n    self._profiling_enabled = True\n    self._performance_stats = {}\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.evaluate_special_form","title":"<code>evaluate_special_form(form, *args)</code>","text":"<p>Evaluate a special form directly.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>str</code> <p>Special form name (def, lambda, if, let, do, quote, try, host)</p> required <code>*args</code> <code>JSLExpression</code> <p>Special form arguments</p> <code>()</code> <p>Returns:</p> Type Description <code>JSLValue</code> <p>Result of special form evaluation</p> Source code in <code>jsl/runner.py</code> <pre><code>def evaluate_special_form(self, form: str, *args: JSLExpression) -&gt; JSLValue:\n    \"\"\"\n    Evaluate a special form directly.\n\n    Args:\n        form: Special form name (def, lambda, if, let, do, quote, try, host)\n        *args: Special form arguments\n\n    Returns:\n        Result of special form evaluation\n    \"\"\"\n    return self.execute([form] + list(args))\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.execute","title":"<code>execute(expression)</code>","text":"<p>Execute a JSL expression.</p> <p>Parameters:</p> Name Type Description Default <code>expression</code> <code>Union[str, JSLExpression]</code> <p>JSL expression as JSON string or parsed structure</p> required <p>Returns:</p> Type Description <code>JSLValue</code> <p>The result of evaluating the expression</p> <p>Raises:</p> Type Description <code>JSLSyntaxError</code> <p>If the expression is malformed</p> <code>JSLRuntimeError</code> <p>If execution fails</p> Source code in <code>jsl/runner.py</code> <pre><code>def execute(self, expression: Union[str, JSLExpression]) -&gt; JSLValue:\n    \"\"\"\n    Execute a JSL expression.\n\n    Args:\n        expression: JSL expression as JSON string or parsed structure\n\n    Returns:\n        The result of evaluating the expression\n\n    Raises:\n        JSLSyntaxError: If the expression is malformed\n        JSLRuntimeError: If execution fails\n    \"\"\"\n    start_time = time.time() if self._profiling_enabled else None\n\n    try:\n        # Parse expression if it's a string\n        if isinstance(expression, str):\n            try:\n                expression = json.loads(expression)\n            except json.JSONDecodeError as e:\n                raise JSLSyntaxError(f\"Invalid JSON in expression: {e}\")\n\n        # Execute the expression\n        result = self.evaluator.eval(expression, self.base_environment)\n\n        # Record performance stats\n        if self._profiling_enabled and start_time:\n            execution_time = (time.time() - start_time) * 1000\n            self._performance_stats['execution_time_ms'] = execution_time\n\n        return result\n\n    except Exception as e:\n        if isinstance(e, (JSLSyntaxError, JSLRuntimeError)):\n            raise\n        else:\n            raise JSLRuntimeError(f\"Execution failed: {e}\")\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.explain_evaluation","title":"<code>explain_evaluation(expression)</code>","text":"<p>Explain how an expression would be evaluated.</p> <p>Parameters:</p> Name Type Description Default <code>expression</code> <code>JSLExpression</code> <p>Expression to explain</p> required <p>Returns:</p> Type Description <code>str</code> <p>Explanation of evaluation steps</p> Source code in <code>jsl/runner.py</code> <pre><code>def explain_evaluation(self, expression: JSLExpression) -&gt; str:\n    \"\"\"\n    Explain how an expression would be evaluated.\n\n    Args:\n        expression: Expression to explain\n\n    Returns:\n        Explanation of evaluation steps\n    \"\"\"\n    if not isinstance(expression, list) or len(expression) == 0:\n        return f\"Literal value: {expression}\"\n\n    form = expression[0]\n    if form in self.get_special_forms():\n        explanations = {\n            \"def\": \"Define variable - evaluates value and binds to name\",\n            \"lambda\": \"Create function - captures current environment as closure\",\n            \"if\": \"Conditional - evaluates condition, then one branch only\",\n            \"let\": \"Local binding - creates temporary scope with new variables\",\n            \"do\": \"Sequential - evaluates all expressions, returns last result\",\n            \"quote\": \"Quote - returns expression without evaluation\",\n            \"@\": \"Quote shorthand - returns expression without evaluation\", \n            \"try\": \"Error handling - evaluates body, calls handler on error\",\n            \"host\": \"Host command - evaluates args and sends to host system\"\n        }\n        return f\"Special form '{form}': {explanations.get(form, 'Unknown')}\"\n    else:\n        return f\"Function call - evaluates '{form}' and all arguments, then calls function\"\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.get_performance_stats","title":"<code>get_performance_stats()</code>","text":"<p>Get performance statistics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary with performance metrics</p> Source code in <code>jsl/runner.py</code> <pre><code>def get_performance_stats(self) -&gt; Dict[str, Any]:\n    \"\"\"\n    Get performance statistics.\n\n    Returns:\n        Dictionary with performance metrics\n    \"\"\"\n    return self._performance_stats.copy()\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.get_special_form_help","title":"<code>get_special_form_help(form)</code>","text":"<p>Get help text for a special form.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>str</code> <p>Special form name</p> required <p>Returns:</p> Type Description <code>str</code> <p>Help text describing the special form</p> Source code in <code>jsl/runner.py</code> <pre><code>def get_special_form_help(self, form: str) -&gt; str:\n    \"\"\"\n    Get help text for a special form.\n\n    Args:\n        form: Special form name\n\n    Returns:\n        Help text describing the special form\n    \"\"\"\n    help_text = {\n        \"def\": \"def - Define a variable: ['def', 'name', value_expr]\",\n        \"lambda\": \"lambda - Create function: ['lambda', ['param1', 'param2'], body_expr]\", \n        \"if\": \"if - Conditional: ['if', condition, then_expr, else_expr]\",\n        \"let\": \"let - Local bindings: ['let', [['var1', val1], ['var2', val2]], body_expr]\",\n        \"do\": \"do - Sequential execution: ['do', expr1, expr2, ...]\",\n        \"quote\": \"quote - Prevent evaluation: ['quote', expr] or ['@', expr]\",\n        \"@\": \"@ - Shorthand quote: ['@', expr] same as ['quote', expr]\",\n        \"try\": \"try - Error handling: ['try', body_expr, handler_expr]\",\n        \"host\": \"host - Host command: ['host', 'command', arg1, arg2, ...]\"\n    }\n\n    return help_text.get(form, f\"Unknown special form: {form}\")\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.get_special_forms","title":"<code>get_special_forms()</code>","text":"<p>Get list of supported special forms.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List of special form names</p> Source code in <code>jsl/runner.py</code> <pre><code>def get_special_forms(self) -&gt; List[str]:\n    \"\"\"\n    Get list of supported special forms.\n\n    Returns:\n        List of special form names\n    \"\"\"\n    return [\"def\", \"lambda\", \"if\", \"let\", \"do\", \"quote\", \"@\", \"try\", \"host\"]\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.get_variable","title":"<code>get_variable(name)</code>","text":"<p>Get a variable from the base environment.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Variable name</p> required <p>Returns:</p> Type Description <code>Any</code> <p>Variable value</p> <p>Raises:</p> Type Description <code>JSLRuntimeError</code> <p>If variable is not defined</p> Source code in <code>jsl/runner.py</code> <pre><code>def get_variable(self, name: str) -&gt; Any:\n    \"\"\"\n    Get a variable from the base environment.\n\n    Args:\n        name: Variable name\n\n    Returns:\n        Variable value\n\n    Raises:\n        JSLRuntimeError: If variable is not defined\n    \"\"\"\n    try:\n        return self.base_environment.get(name)\n    except KeyError:\n        raise JSLRuntimeError(f\"Undefined variable: {name}\")\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.host_command","title":"<code>host_command(command, *args)</code>","text":"<p>Execute a host command.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>str</code> <p>Host command name</p> required <code>*args</code> <code>Any</code> <p>Command arguments</p> <code>()</code> <p>Returns:</p> Type Description <code>JSLValue</code> <p>Result from host command</p> Source code in <code>jsl/runner.py</code> <pre><code>def host_command(self, command: str, *args: Any) -&gt; JSLValue:\n    \"\"\"\n    Execute a host command.\n\n    Args:\n        command: Host command name\n        *args: Command arguments\n\n    Returns:\n        Result from host command\n    \"\"\"\n    return self.execute([\"host\", command] + list(args))\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.let_binding","title":"<code>let_binding(bindings, body)</code>","text":"<p>Execute expression with local bindings.</p> <p>Parameters:</p> Name Type Description Default <code>bindings</code> <code>Dict[str, JSLExpression]</code> <p>Dictionary of variable names to expressions</p> required <code>body</code> <code>JSLExpression</code> <p>Expression to evaluate with bindings</p> required <p>Returns:</p> Type Description <code>JSLValue</code> <p>Result of body expression</p> Source code in <code>jsl/runner.py</code> <pre><code>def let_binding(self, bindings: Dict[str, JSLExpression], body: JSLExpression) -&gt; JSLValue:\n    \"\"\"\n    Execute expression with local bindings.\n\n    Args:\n        bindings: Dictionary of variable names to expressions\n        body: Expression to evaluate with bindings\n\n    Returns:\n        Result of body expression\n    \"\"\"\n    binding_list = [[name, expr] for name, expr in bindings.items()]\n    return self.execute([\"let\", binding_list, body])\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.new_environment","title":"<code>new_environment()</code>","text":"<p>Create a new isolated environment context.</p> <p>Yields:</p> Name Type Description <code>ExecutionContext</code> <p>New execution context</p> Source code in <code>jsl/runner.py</code> <pre><code>@contextmanager\ndef new_environment(self):\n    \"\"\"\n    Create a new isolated environment context.\n\n    Yields:\n        ExecutionContext: New execution context\n    \"\"\"\n    # Create new environment extending the base\n    new_env = self.base_environment.extend({})\n    context = ExecutionContext(new_env)\n\n    # Create temporary runner for this context\n    temp_runner = JSLRunner(self.config, self.security)\n    temp_runner.base_environment = new_env\n\n    try:\n        yield temp_runner\n    finally:\n        # Cleanup happens automatically when context exits\n        pass\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.quote","title":"<code>quote(expression)</code>","text":"<p>Quote an expression (prevent evaluation).</p> <p>Parameters:</p> Name Type Description Default <code>expression</code> <code>JSLExpression</code> <p>Expression to quote</p> required <p>Returns:</p> Type Description <code>JSLValue</code> <p>The expression as literal data</p> Source code in <code>jsl/runner.py</code> <pre><code>def quote(self, expression: JSLExpression) -&gt; JSLValue:\n    \"\"\"\n    Quote an expression (prevent evaluation).\n\n    Args:\n        expression: Expression to quote\n\n    Returns:\n        The expression as literal data\n    \"\"\"\n    return self.execute([\"quote\", expression])\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.try_catch","title":"<code>try_catch(body, handler)</code>","text":"<p>Execute expression with error handling.</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <code>JSLExpression</code> <p>Expression to execute</p> required <code>handler</code> <code>JSLExpression</code> <p>Handler function for errors</p> required <p>Returns:</p> Type Description <code>JSLValue</code> <p>Result of body or handler</p> Source code in <code>jsl/runner.py</code> <pre><code>def try_catch(self, body: JSLExpression, handler: JSLExpression) -&gt; JSLValue:\n    \"\"\"\n    Execute expression with error handling.\n\n    Args:\n        body: Expression to execute\n        handler: Handler function for errors\n\n    Returns:\n        Result of body or handler\n    \"\"\"\n    return self.execute([\"try\", body, handler])\n</code></pre>"},{"location":"api/runner/#jsl.runner.JSLRunner.validate_special_form","title":"<code>validate_special_form(form, args)</code>","text":"<p>Validate special form syntax.</p> <p>Parameters:</p> Name Type Description Default <code>form</code> <code>str</code> <p>Special form name</p> required <code>args</code> <code>List[JSLExpression]</code> <p>Arguments to the special form</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if valid, False otherwise</p> Source code in <code>jsl/runner.py</code> <pre><code>def validate_special_form(self, form: str, args: List[JSLExpression]) -&gt; bool:\n    \"\"\"\n    Validate special form syntax.\n\n    Args:\n        form: Special form name\n        args: Arguments to the special form\n\n    Returns:\n        True if valid, False otherwise\n    \"\"\"\n    validations = {\n        \"def\": lambda a: len(a) == 2 and isinstance(a[0], str),\n        \"lambda\": lambda a: len(a) == 2 and isinstance(a[0], list),\n        \"if\": lambda a: len(a) in [2, 3],\n        \"let\": lambda a: len(a) == 2 and isinstance(a[0], list),\n        \"do\": lambda a: len(a) &gt;= 1,\n        \"quote\": lambda a: len(a) == 1,\n        \"@\": lambda a: len(a) == 1,\n        \"try\": lambda a: len(a) == 2,\n        \"host\": lambda a: len(a) &gt;= 1\n    }\n\n    if form not in validations:\n        return False\n\n    try:\n        return validations[form](args)\n    except:\n        return False\n</code></pre>"},{"location":"api/runner/#jsl.runner.ExecutionContext","title":"<code>ExecutionContext(environment, parent=None)</code>","text":"<p>Context for a single execution session.</p> Source code in <code>jsl/runner.py</code> <pre><code>def __init__(self, environment: Env, parent: Optional['ExecutionContext'] = None):\n    self.environment = environment\n    self.parent = parent\n    self.start_time = time.time()\n    self.memory_used = 0\n</code></pre>"},{"location":"api/runner/#jsl.runner.ExecutionContext.define","title":"<code>define(name, value)</code>","text":"<p>Define a variable in this context.</p> Source code in <code>jsl/runner.py</code> <pre><code>def define(self, name: str, value: Any) -&gt; None:\n    \"\"\"Define a variable in this context.\"\"\"\n    self.environment.define(name, value)\n</code></pre>"},{"location":"api/runner/#jsl.runner.ExecutionContext.get_variable","title":"<code>get_variable(name)</code>","text":"<p>Get a variable from this context.</p> Source code in <code>jsl/runner.py</code> <pre><code>def get_variable(self, name: str) -&gt; Any:\n    \"\"\"Get a variable from this context.\"\"\"\n    try:\n        return self.environment.get(name)\n    except KeyError:\n        raise JSLRuntimeError(f\"Undefined variable: {name}\")\n</code></pre>"},{"location":"api/runner/#usage-examples","title":"Usage Examples","text":""},{"location":"api/runner/#basic-program-execution","title":"Basic Program Execution","text":"<pre><code>from jsl.runner import JSLRunner\n\n# Create runner instance\nrunner = JSLRunner()\n\n# Execute simple expression\nresult = runner.execute([\"+\", 1, 2])\nprint(result)  # Output: 3\n\n# Execute with variables\nrunner.define(\"x\", 10)\nresult = runner.execute([\"*\", \"x\", 2])\nprint(result)  # Output: 20\n</code></pre>"},{"location":"api/runner/#environment-management","title":"Environment Management","text":"<pre><code># Create isolated environment\nwith runner.new_environment() as env:\n    env.define(\"temp_var\", 42)\n    result = env.execute([\"*\", \"temp_var\", 2])\n    print(result)  # Output: 84\n# temp_var is no longer accessible\n</code></pre>"},{"location":"api/runner/#closure-execution","title":"Closure Execution","text":"<pre><code># Define function\nrunner.execute([\"def\", \"square\", [\"lambda\", [\"x\"], [\"*\", \"x\", \"x\"]]])\n\n# Call function\nresult = runner.execute([\"square\", 5])\nprint(result)  # Output: 25\n\n# Access function object\nsquare_fn = runner.get_variable(\"square\")\nprint(square_fn.params)  # Output: [\"x\"]\nprint(square_fn.body)    # Output: [\"*\", \"x\", \"x\"]\n</code></pre>"},{"location":"api/runner/#host-interaction","title":"Host Interaction","text":"<pre><code>from jsl.runner import JSLRunner\nfrom jsl.jhip import FileHandler\n\n# Configure with host handlers\nrunner = JSLRunner()\nrunner.add_host_handler(\"file\", FileHandler())\n\n# Execute host interaction\nresult = runner.execute([\"host\", \"file/read\", \"/tmp/data.txt\"])\n</code></pre>"},{"location":"api/runner/#error-handling","title":"Error Handling","text":"<pre><code>try:\n    result = runner.execute([\"undefined_function\", 1, 2])\nexcept JSLRuntimeError as e:\n    print(f\"Runtime error: {e}\")\nexcept JSLSyntaxError as e:\n    print(f\"Syntax error: {e}\")\n</code></pre>"},{"location":"api/runner/#configuration-options","title":"Configuration Options","text":""},{"location":"api/runner/#runner-configuration","title":"Runner Configuration","text":"<pre><code>config = {\n    \"max_recursion_depth\": 1000,\n    \"enable_debugging\": True,\n    \"timeout_seconds\": 30,\n    \"memory_limit_mb\": 512\n}\n\nrunner = JSLRunner(config=config)\n</code></pre>"},{"location":"api/runner/#security-settings","title":"Security Settings","text":"<pre><code>security_config = {\n    \"allowed_host_commands\": [\"file/read\", \"time/now\"],\n    \"sandbox_mode\": True,\n    \"restrict_network\": True\n}\n\nrunner = JSLRunner(security=security_config)\n</code></pre>"},{"location":"api/runner/#performance-monitoring","title":"Performance Monitoring","text":"<pre><code># Enable performance tracking\nrunner.enable_profiling()\n\n# Execute code\nresult = runner.execute(complex_expression)\n\n# Get performance metrics\nstats = runner.get_performance_stats()\nprint(f\"Execution time: {stats['execution_time_ms']}ms\")\nprint(f\"Memory used: {stats['memory_used_mb']}MB\")\n</code></pre>"},{"location":"api/serialization/","title":"Serialization API","text":"<p>For conceptual background on JSL's serialization design, see Architecture: Serialization.</p>"},{"location":"api/serialization/#overview","title":"Overview","text":"<p>The JSL serialization API provides functions for converting JSL code and data structures to and from JSON representations, with special handling for closures and environment capture.</p>"},{"location":"api/serialization/#core-functions","title":"Core Functions","text":"<p>JSL Serialization - JSON serialization for JSL values and closures</p> <p>This module handles the serialization and deserialization of JSL values, including closures with their captured environments.</p>"},{"location":"api/serialization/#jsl.serialization.serialize","title":"<code>serialize(obj, indent=None)</code>","text":"<p>Serialize a JSL value to JSON string.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The JSL value to serialize</p> required <code>indent</code> <code>int</code> <p>Optional indentation for pretty printing</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>JSON string representation</p> Source code in <code>jsl/serialization.py</code> <pre><code>def serialize(obj: Any, indent: int = None) -&gt; str:\n    \"\"\"\n    Serialize a JSL value to JSON string.\n\n    Args:\n        obj: The JSL value to serialize\n        indent: Optional indentation for pretty printing\n\n    Returns:\n        JSON string representation\n    \"\"\"\n    return json.dumps(obj, cls=JSLEncoder, indent=indent)\n</code></pre>"},{"location":"api/serialization/#jsl.serialization.deserialize","title":"<code>deserialize(json_str, prelude_env=None)</code>","text":"<p>Deserialize a JSON string to JSL value.</p> <p>Parameters:</p> Name Type Description Default <code>json_str</code> <code>str</code> <p>JSON string to deserialize</p> required <code>prelude_env</code> <code>Env</code> <p>Optional prelude environment for closure reconstruction</p> <code>None</code> <p>Returns:</p> Type Description <code>Any</code> <p>Reconstructed JSL value</p> Source code in <code>jsl/serialization.py</code> <pre><code>def deserialize(json_str: str, prelude_env: Env = None) -&gt; Any:\n    \"\"\"\n    Deserialize a JSON string to JSL value.\n\n    Args:\n        json_str: JSON string to deserialize\n        prelude_env: Optional prelude environment for closure reconstruction\n\n    Returns:\n        Reconstructed JSL value\n    \"\"\"\n    decoder = JSLDecoder(prelude_env)\n    return decoder.decode(json_str)\n</code></pre>"},{"location":"api/serialization/#usage-examples","title":"Usage Examples","text":""},{"location":"api/serialization/#basic-serialization","title":"Basic Serialization","text":"<pre><code>from jsl.serialization import serialize, deserialize\n\n# Serialize JSL expression\nexpr = [\"+\", 1, 2]\njson_str = serialize(expr)\n# Result: '[\"+\"\", 1, 2]'\n\n# Deserialize back to JSL\nrestored = deserialize(json_str)\n# Result: [\"+\", 1, 2]\n</code></pre>"},{"location":"api/serialization/#closure-serialization","title":"Closure Serialization","text":"<pre><code>from jsl.serialization import serialize_closure, deserialize_closure\n\n# Serialize a closure with captured environment\nclosure_data = {\n    \"params\": [\"x\"],\n    \"body\": [\"+\", \"x\", \"captured_var\"],\n    \"env\": {\"captured_var\": 10}\n}\n\nserialized = serialize_closure(closure_data)\nrestored = deserialize_closure(serialized)\n</code></pre>"},{"location":"api/serialization/#network-transmission","title":"Network Transmission","text":"<pre><code>import json\nfrom jsl.serialization import serialize\n\n# Prepare JSL code for network transmission\ncode = [\"lambda\", [\"x\"], [\"*\", \"x\", \"x\"]]\npayload = {\n    \"type\": \"execute\",\n    \"code\": serialize(code),\n    \"timestamp\": \"2023-12-01T10:00:00Z\"\n}\n\n# Send as JSON\njson_payload = json.dumps(payload)\n</code></pre>"},{"location":"api/serialization/#type-mappings","title":"Type Mappings","text":"JSL Type JSON Type Notes Number Number Direct mapping String String Direct mapping Boolean Boolean Direct mapping Null Null Direct mapping Array Array Recursive serialization Object Object Recursive serialization Closure Object Special format with type field"},{"location":"api/serialization/#error-handling","title":"Error Handling","text":"<p>The serialization API handles various error conditions:</p> <ul> <li>Circular References: Detected and handled gracefully</li> <li>Invalid JSON: Proper error messages for malformed input</li> <li>Type Errors: Clear indication of unsupported types</li> <li>Encoding Issues: UTF-8 handling for international text</li> </ul>"},{"location":"api/serialization/#performance-notes","title":"Performance Notes","text":"<ul> <li>Time Complexity: O(n) where n is the size of the data structure</li> <li>Space Complexity: O(d) additional space where d is the depth of nesting</li> <li>Optimization: Built-in caching for repeated serialization of identical structures</li> </ul>"},{"location":"architecture/distributed/","title":"Distributed Computing with JSL","text":""},{"location":"architecture/distributed/#overview","title":"Overview","text":"<p>JSL's core design\u2014being homoiconic and having a robust, verifiable serialization model\u2014makes it an ideal language for building distributed systems. Because both code and state can be safely transmitted over the network, complex distributed patterns can be expressed with the same clarity as local computations.</p> <p>An Architectural Showcase: The following examples are an architectural showcase of what is possible. They are not a standard library reference. These patterns assume the host environment provides a rich set of networking primitives (e.g., <code>remote/execute</code>, <code>remote/call</code>). The purpose is to demonstrate how JSL can be used as the foundation for a powerful distributed computing framework.</p>"},{"location":"architecture/distributed/#core-patterns","title":"Core Patterns","text":""},{"location":"architecture/distributed/#1-remote-execution","title":"1. Remote Execution","text":"<p>The most fundamental pattern is executing a function on a remote node. JSL's serializable closures make this trivial. The closure packages its code and its environment, which can be sent to a remote host for evaluation.</p> <p>The host provides <code>remote/execute</code> which takes a node, a function, and arguments. <pre><code>[\"host\", \"remote/execute\", \"node-2\", \n  [\"lambda\", [\"x\"], [\"*\", \"x\", \"x\"]],\n  5]\n</code></pre></p>"},{"location":"architecture/distributed/#2-master-worker-pattern","title":"2. Master-Worker Pattern","text":"<p>A coordinator node can partition a workload and distribute it among a set of worker nodes. This pattern highlights how JSL's functional nature (<code>map</code>, <code>zip</code>) simplifies parallel processing logic. The worker function itself is passed as an argument, making this a flexible, higher-order function.</p> <pre><code>[\"def\", \"distribute_work\",\n  [\"lambda\", [\"work_items\", \"workers\", \"work_fn\"],\n    [\"do\",\n      [\"def\", \"chunks\", [\"partition\", \"work_items\", [\"length\", \"workers\"]]],\n      [\"def\", \"tasks\", [\"zip\", \"workers\", \"chunks\"]],\n      [\"map\", \n        [\"lambda\", [\"task\"],\n          [\"host\", \"remote/execute\", \n            [\"first\", \"task\"],\n            \"work_fn\",\n            [\"second\", \"task\"]]],\n        \"tasks\"]]]]\n</code></pre>"},{"location":"architecture/distributed/#3-fault-tolerance-via-retries","title":"3. Fault Tolerance via Retries","text":"<p>Handling network failures is critical. Because JSL code is data, we can easily write higher-order functions that wrap any remote call with a retry mechanism.</p> <p>This example defines a recursive inner function, <code>try_call</code>, to handle the retry loop. The <code>try</code> special form is used to catch failures, and the error handler recursively calls itself with one fewer attempt. <pre><code>[\"def\", \"reliable_remote_call\",\n  [\"lambda\", [\"node\", \"function\", \"args\", \"max_retries\"],\n    [\"do\",\n      [\"def\", \"try_call\",\n        [\"lambda\", [\"attempts_left\"],\n          [\"if\", [\"=\", \"attempts_left\", 0],\n            [\"error\", \"Max retries exceeded\"],\n            [\"try\",\n              [\"host\", \"remote/call\", \"node\", \"function\", \"args\"],\n              [\"lambda\", [\"error\"],\n                [\"do\",\n                  [\"host\", \"log/warn\", [\"@\", \"Retry attempt \", [\"-\", [\"+\", \"max_retries\", 1], \"attempts_left\"], \" failed. Retrying...\"]],\n                  [\"try_call\", [\"-\", \"attempts_left\", 1]]\n                ]\n              ]\n            ]\n          ]\n        ]\n      ],\n      [\"try_call\", \"max_retries\"]\n    ]\n  ]\n]\n</code></pre></p>"},{"location":"architecture/distributed/#advanced-patterns","title":"Advanced Patterns","text":"<p>JSL's composability allows these simple building blocks to be combined into sophisticated distributed algorithms.</p>"},{"location":"architecture/distributed/#mapreduce-implementation","title":"MapReduce Implementation","text":"<p>This example shows how a full MapReduce job can be expressed by composing the <code>distribute_work</code> function defined earlier.</p> <p>The process is broken down into three phases: 1.  MAP PHASE: Distribute the map function across the map nodes. 2.  SHUFFLE PHASE: Group the intermediate results by key. 3.  REDUCE PHASE: Distribute the reduce function across the reduce nodes to produce the final result. <pre><code>[\"def\", \"mapreduce\",\n  [\"lambda\", [\"map_fn\", \"reduce_fn\", \"data\", \"map_nodes\", \"reduce_nodes\"],\n    [\"do\",\n      [\"def\", \"map_results\", [\"distribute_work\", \"data\", \"map_nodes\", \"map_fn\"]],\n      [\"def\", \"grouped\", [\"group_by\", \"first\", [\"flatten\", \"map_results\"]]],\n      [\"def\", \"reduce_tasks\", [\"items\", \"grouped\"]],\n      [\"distribute_work\", \"reduce_tasks\", \"reduce_nodes\", \"reduce_fn\"]\n    ]\n  ]\n]\n</code></pre></p> <p>These examples illustrate that JSL provides the ideal substrate for building resilient, scalable systems while maintaining the simplicity and clarity of the language's core design principles.</p>"},{"location":"architecture/network/","title":"Network Transparency","text":""},{"location":"architecture/network/#overview","title":"Overview","text":"<p>Network transparency is one of JSL's defining characteristics - the ability to seamlessly transmit, store, and execute code across network boundaries with the same fidelity as local execution. This capability is fundamental to JSL's design and enables new patterns in distributed computing.</p>"},{"location":"architecture/network/#what-is-network-transparency","title":"What is Network Transparency?","text":"<p>Network transparency means that code can be:</p> <ol> <li>Serialized into a universal format (JSON)</li> <li>Transmitted over any network transport</li> <li>Stored in any JSON-compatible storage system</li> <li>Reconstructed in a different runtime environment</li> <li>Executed with identical behavior to the original</li> </ol> <p>This creates a programming model where the physical location of code execution becomes an implementation detail rather than a fundamental constraint.</p>"},{"location":"architecture/network/#technical-foundation","title":"Technical Foundation","text":""},{"location":"architecture/network/#json-as-universal-representation","title":"JSON as Universal Representation","text":"<p>JSL achieves network transparency by using JSON as the canonical representation for both code and data.</p> <pre><code>// This JSL function can be transmitted anywhere JSON is supported\n[\"lambda\", [\"x\"], [\"*\", \"x\", \"x\"]]\n</code></pre> <p>Advantages: - Universal parsing: Every major platform supports JSON - Human readable: Code can be inspected and understood - Schema validation: Structure can be verified - Version stable: JSON specification is stable and backward compatible</p>"},{"location":"architecture/network/#closure-serialization","title":"Closure Serialization","text":"<p>JSL's closure serialization ensures that functions retain their behavior across network boundaries.</p> <pre><code>// Original environment: x = 10\n[\"lambda\", [\"y\"], [\"+\", \"x\", \"y\"]]\n\n// Serialized with captured environment:\n{\n  \"type\": \"closure\",\n  \"params\": [\"y\"],\n  \"body\": [\"+\", \"x\", \"y\"],\n  \"env\": {\"x\": 10}\n}\n</code></pre>"},{"location":"architecture/network/#network-transport-patterns","title":"Network Transport Patterns","text":""},{"location":"architecture/network/#request-response-pattern","title":"Request-Response Pattern","text":"<pre><code>Client                    Server\n  |                         |\n  |------ JSL Function ----&gt;|\n  |                         |\n  |&lt;----- JSON Result ------|\n  |                         |\n</code></pre> <p>Example of sending a computation to a server:</p> <pre><code>{\n  \"code\": [\"map\", [\"lambda\", [\"x\"], [\"*\", \"x\", 2]], [1, 2, 3, 4]],\n  \"data\": {}\n}\n</code></pre> <p>And receiving the result:</p> <pre><code>{\"result\": [2, 4, 6, 8]}\n</code></pre>"},{"location":"architecture/network/#code-migration-pattern","title":"Code Migration Pattern","text":"<pre><code>Runtime A                 Runtime B\n  |                         |\n  |-- Serialize Closure ---&gt;|\n  |                         |\n  |                         |-- Execute --&gt;\n  |                         |\n  |&lt;-- Return Result -------|\n</code></pre>"},{"location":"architecture/network/#distributed-pipeline-pattern","title":"Distributed Pipeline Pattern","text":"<pre><code>Data Source -&gt; JSL Stage 1 -&gt; JSL Stage 2 -&gt; JSL Stage 3 -&gt; Result\n    |             |             |             |\n    |             |             |             |\nNetwork A     Network B     Network C     Network D\n</code></pre>"},{"location":"architecture/network/#storage-transparency","title":"Storage Transparency","text":"<p>JSL code can be stored in any system that supports JSON:</p>"},{"location":"architecture/network/#database-storage","title":"Database Storage","text":"<pre><code>-- Store JSL functions in database\nCREATE TABLE jsl_functions (\n  id SERIAL PRIMARY KEY,\n  name VARCHAR(255),\n  code JSONB,\n  created_at TIMESTAMP\n);\n\n-- Insert JSL function\nINSERT INTO jsl_functions (name, code) VALUES (\n  'square',\n  '[\"lambda\", [\"x\"], [\"*\", \"x\", \"x\"]]'::JSONB\n);\n</code></pre>"},{"location":"architecture/network/#file-system-storage","title":"File System Storage","text":"<pre><code>// functions/math.jsl\n{\n  \"square\": [\"lambda\", [\"x\"], [\"*\", \"x\", \"x\"]],\n  \"cube\": [\"lambda\", [\"x\"], [\"*\", \"x\", \"x\", \"x\"]],\n  \"factorial\": [\"lambda\", [\"n\"], \n    [\"if\", [\"&lt;=\", \"n\", 1], \n     1, \n     [\"*\", \"n\", [\"factorial\", [\"-\", \"n\", 1]]]]]\n}\n</code></pre>"},{"location":"architecture/network/#distributed-storage","title":"Distributed Storage","text":"<pre><code>// Configuration for distributed JSL library\n{\n  \"repositories\": [\n    \"https://jsllib.example.com/math\",\n    \"https://jsllib.example.com/string\",\n    \"https://jsllib.example.com/data\"\n  ],\n  \"cache\": {\n    \"local\": \"/tmp/jsl-cache\",\n    \"ttl\": 3600\n  }\n}\n</code></pre>"},{"location":"architecture/network/#implementation-strategies","title":"Implementation Strategies","text":""},{"location":"architecture/network/#eager-loading","title":"Eager Loading","text":"<pre><code>// Load all dependencies upfront\n{\n  \"main\": [\"do\", \n    [\"use\", \"math/statistics\"],\n    [\"mean\", [1, 2, 3, 4, 5]]\n  ],\n  \"dependencies\": {\n    \"math/statistics\": {\n      \"mean\": [\"lambda\", [\"xs\"], [\"quotient\", [\"sum\", \"xs\"], [\"length\", \"xs\"]]],\n      \"sum\": [\"lambda\", [\"xs\"], [\"reduce\", \"+\", 0, \"xs\"]]\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/network/#lazy-loading","title":"Lazy Loading","text":"<pre><code>// Load dependencies on demand\n{\n  \"main\": [\"do\",\n    [\"import\", \"https://jsllib.com/math/statistics.jsl\"],\n    [\"mean\", [1, 2, 3, 4, 5]]\n  ]\n}\n</code></pre>"},{"location":"architecture/network/#caching-strategies","title":"Caching Strategies","text":"<pre><code>// Cache configuration\n{\n  \"cache_policy\": {\n    \"strategy\": \"content_hash\",\n    \"ttl\": 86400,\n    \"max_size\": \"100MB\",\n    \"locations\": [\n      \"memory\",\n      \"disk\",\n      \"distributed\"\n    ]\n  }\n}\n</code></pre>"},{"location":"architecture/network/#network-protocols","title":"Network Protocols","text":""},{"location":"architecture/network/#http-transport","title":"HTTP Transport","text":"<pre><code>POST /jsl/execute HTTP/1.1\nContent-Type: application/json\n\n{\n  \"code\": [\"host\", \"http/get\", \"https://api.example.com/data\"],\n  \"timeout\": 30000\n}\n</code></pre>"},{"location":"architecture/network/#websocket-transport","title":"WebSocket Transport","text":"<pre><code>// Real-time JSL execution\n{\n  \"type\": \"execute\",\n  \"id\": \"req-123\",\n  \"code\": [\"stream-map\", [\"lambda\", [\"x\"], [\"inc\", \"x\"]], \"input-stream\"]\n}\n</code></pre>"},{"location":"architecture/network/#message-queue-transport","title":"Message Queue Transport","text":"<pre><code>// Queue: jsl-tasks\n{\n  \"task_id\": \"task-456\",\n  \"code\": [\"batch-process\", \"data-batch-1\"],\n  \"priority\": \"high\",\n  \"retry_count\": 3\n}\n</code></pre>"},{"location":"architecture/network/#performance-considerations","title":"Performance Considerations","text":""},{"location":"architecture/network/#bandwidth-optimization","title":"Bandwidth Optimization","text":"<ol> <li>Code Compression</li> <li>JSON compression (gzip, brotli)</li> <li>Code minification (remove whitespace)</li> <li> <p>Delta compression (send only changes)</p> </li> <li> <p>Caching</p> </li> <li>Function memoization</li> <li>Code artifact caching</li> <li> <p>Network-level caching</p> </li> <li> <p>Batching</p> </li> <li>Multiple operations in single request</li> <li>Pipeline optimization</li> <li>Bulk data transfer</li> </ol>"},{"location":"architecture/network/#latency-optimization","title":"Latency Optimization","text":"<ol> <li>Preloading</li> <li>Predictive code loading</li> <li>Warm caches</li> <li> <p>Connection pooling</p> </li> <li> <p>Locality</p> </li> <li>Edge computing deployment</li> <li>Regional code distribution</li> <li>Data locality optimization</li> </ol>"},{"location":"architecture/network/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/network/#transport-security","title":"Transport Security","text":"<ul> <li>Encryption: TLS for all network transport</li> <li>Authentication: Verify code sources</li> <li>Integrity: Hash verification of transmitted code</li> </ul>"},{"location":"architecture/network/#code-validation","title":"Code Validation","text":"<ul> <li>Schema validation: Verify JSON structure</li> <li>Security scanning: Detect malicious patterns</li> <li>Resource limits: Prevent resource exhaustion</li> </ul>"},{"location":"architecture/network/#access-control","title":"Access Control","text":"<ul> <li>Code signing: Cryptographic verification</li> <li>Capability restrictions: Limit available operations</li> <li>Audit logging: Track all code execution</li> </ul>"},{"location":"architecture/network/#use-cases","title":"Use Cases","text":""},{"location":"architecture/network/#distributed-computing","title":"Distributed Computing","text":"<pre><code>// Send computation to data location\n{\n  \"target\": \"data-center-eu\",\n  \"code\": [\"analyze-user-behavior\", \"european-users\"],\n  \"resources\": {\"cpu\": \"4-cores\", \"memory\": \"8GB\"}\n}\n</code></pre>"},{"location":"architecture/network/#edge-computing","title":"Edge Computing","text":"<pre><code>// Deploy logic to edge devices\n{\n  \"targets\": [\"edge-device-*\"],\n  \"code\": [\"if\", [\"sensor-reading\", \"&gt;\", 100], \n    [\"alert\", \"temperature-high\"],\n    null\n  ]\n}\n</code></pre>"},{"location":"architecture/network/#database-functions","title":"Database Functions","text":"<pre><code>-- Execute JSL directly in database\nSELECT jsl_execute('[\"group-by\", \"status\", \"orders\"]', orders_table);\n</code></pre>"},{"location":"architecture/network/#microservice-communication","title":"Microservice Communication","text":"<pre><code>// Service A requests computation from Service B\n{\n  \"service\": \"analytics-service\",\n  \"function\": [\"lambda\", [\"data\"], [\"statistical-summary\", \"data\"]],\n  \"data\": {...}\n}\n</code></pre> <p>Network transparency fundamentally changes how we think about distributed computing, making code mobility as natural as data mobility and enabling new architectures that were previously impractical or impossible.</p>"},{"location":"architecture/philosophy/","title":"Design Philosophy","text":""},{"location":"architecture/philosophy/#the-problem-with-traditional-code-mobility","title":"The Problem with Traditional Code Mobility","text":"<p>Modern distributed systems require seamless code mobility\u2014the ability to send executable code across network boundaries, store it in databases, and reconstruct it in different runtime environments. Traditional approaches face fundamental challenges:</p>"},{"location":"architecture/philosophy/#1-serialization-complexity","title":"1. Serialization Complexity","text":"<p>Most languages require complex serialization frameworks (e.g., pickle, protobuf) that are brittle, version-dependent, and often insecure.</p>"},{"location":"architecture/philosophy/#2-runtime-dependencies","title":"2. Runtime Dependencies","text":"<p>Serialized code often depends on specific runtime versions, libraries, or execution contexts that may not be available on the receiving end.</p>"},{"location":"architecture/philosophy/#3-security-vulnerabilities","title":"3. Security Vulnerabilities","text":"<p>Deserializing code can execute arbitrary instructions, creating significant attack vectors.</p>"},{"location":"architecture/philosophy/#4-platform-lock-in","title":"4. Platform Lock-in","text":"<p>Serialization formats are often language-specific, preventing cross-platform code sharing.</p>"},{"location":"architecture/philosophy/#the-jsl-solution","title":"The JSL Solution","text":"<p>JSL solves these problems by making JSON the native representation for both data and code. This design enables powerful properties for network-native programming. The core language is purely functional and safe, while interactions with the host system are reified as data and controlled through a programmable, capability-based environment model.</p>"},{"location":"architecture/philosophy/#theoretical-foundations","title":"Theoretical Foundations","text":""},{"location":"architecture/philosophy/#homoiconicity","title":"Homoiconicity","text":"<p>Like classic Lisps, JSL is homoiconic, meaning code and data share the same representation. However, instead of S-expressions, JSL uses JSON\u2014a universally supported and standardized format.</p> <p>Key Benefits:</p> <ul> <li>No Parsing Ambiguity: JSON has a precise, standardized grammar.</li> <li>Universal Tooling: Every major language and platform can handle JSON.</li> <li>Network Transparency: Valid JSON travels safely across all network protocols.</li> <li>Human Readability: Code can be inspected and modified with standard text tools.</li> </ul>"},{"location":"architecture/philosophy/#verifiable-serializable-state","title":"Verifiable, Serializable State","text":"<p>Handling closures (functions that capture their lexical environment) is a primary challenge in code mobility. JSL solves this with a content-addressable storage model for environments, which makes program state verifiable, efficient, and safely serializable.</p> <ul> <li>Content-Addressable Environments: Every environment (a map of names to values) is identified by a unique hash of its contents. This includes the hash of its parent environment, creating a secure, recursive chain of scopes similar to a blockchain.</li> <li>Serializable Closures: A closure is serialized as a pure JSON object containing its code and the hash of the environment it was defined in. This is a lightweight, secure pointer to its full lexical context.</li> <li>Prelude Verification: The entire serialized payload includes a <code>prelude_hash</code>, a fingerprint of the core library version it depends on. This allows a receiving system to immediately verify runtime compatibility before execution.</li> </ul> <p>This architecture ensures that a serialized JSL program is a self-contained, verifiable, and perfectly reproducible unit of computation.</p>"},{"location":"architecture/philosophy/#wire-format-transparency","title":"Wire-Format Transparency","text":"<p>Every JSL value can be serialized to JSON and reconstructed identically in any compliant runtime. This enables:</p> <ul> <li>Database Storage: Store executable code with ACID properties.</li> <li>HTTP Transmission: Send functions using standard web infrastructure.</li> <li>Cross-Language Interoperability: Leverage JSON's universal support.</li> <li>Audit Trails: Create reproducible records of code execution.</li> <li>Version Control: Use standard JSON diff/merge tools to manage code.</li> </ul>"},{"location":"architecture/philosophy/#practical-applications","title":"Practical Applications","text":""},{"location":"architecture/philosophy/#1-distributed-computing","title":"1. Distributed Computing","text":"<p>Send computations to where data resides, rather than moving data.</p> <pre><code>[\"lambda\", [\"data\"], \n  [\"filter\", \n    [\"lambda\", [\"record\"], [\"=\", [\"get\", \"record\", \"status\"], \"active\"]], \n    \"data\"]]\n</code></pre>"},{"location":"architecture/philosophy/#2-edge-computing","title":"2. Edge Computing","text":"<p>Deploy and update logic on edge devices dynamically.</p> <pre><code>[\"lambda\", [\"sensor_reading\"],\n  [\"if\", [\"&gt;\", \"sensor_reading\", 75],\n    [\"send-alert\", \"High temperature detected\"],\n    [\"log\", \"Normal reading:\", \"sensor_reading\"]]]\n</code></pre>"},{"location":"architecture/philosophy/#3-database-functions","title":"3. Database Functions","text":"<p>Store and execute business logic directly in databases.</p> <pre><code>[\"lambda\", [\"user_id\", \"new_status\"],\n  [\"host\", \"db/update\", \"users\", \n    {\"id\": \"user_id\"}, \n    {\"$set\": {\"status\": \"new_status\"}}]]\n</code></pre>"},{"location":"architecture/philosophy/#sicp-inspired-design","title":"SICP-Inspired Design","text":"<p>JSL follows the elegant principles outlined in \"Structure and Interpretation of Computer Programs\":</p> <ul> <li>Simplicity: Everything is built from a small set of primitives (atoms, lists, functions).</li> <li>Composability: Complex operations are created by combining simple ones.</li> <li>Abstraction: Higher-level concepts are built on lower-level foundations.</li> <li>Uniformity: A consistent evaluation model applies throughout the language.</li> <li>Extensibility: New capabilities are added through composition, not special cases.</li> </ul> <p>This approach creates a language that is both theoretically elegant and practically useful for distributed computing.</p>"},{"location":"architecture/runtime/","title":"Runtime Architecture","text":""},{"location":"architecture/runtime/#overview","title":"Overview","text":"<p>The JSL ecosystem is designed as a layered architecture that separates concerns and ensures both security and portability. Understanding these layers is crucial for implementing JSL systems and reasoning about code execution.</p>"},{"location":"architecture/runtime/#architecture-layers","title":"Architecture Layers","text":"<p>The JSL runtime can be conceptualized in six distinct layers:</p>"},{"location":"architecture/runtime/#1-wire-layer-json","title":"1. Wire Layer (JSON)","text":"<p>The universal representation for JSL programs, data, and serialized closures. This is what gets transmitted over networks or stored in databases.</p> <p>Characteristics: - Standard JSON format - Universal compatibility - Human-readable - Version-independent - Platform-agnostic</p>"},{"location":"architecture/runtime/#2-jsl-runtimeinterpreter","title":"2. JSL Runtime/Interpreter","text":"<p>The core execution engine that processes JSL code:</p>"},{"location":"architecture/runtime/#parser","title":"Parser","text":"<ul> <li>Converts JSON into internal JSL abstract syntax</li> <li>Validates JSON structure against JSL grammar</li> <li>Handles syntax errors and malformed input</li> </ul>"},{"location":"architecture/runtime/#evaluator","title":"Evaluator","text":"<ul> <li>Executes JSL code based on language semantics</li> <li>Handles special forms (<code>def</code>, <code>lambda</code>, <code>if</code>, <code>do</code>, <code>host</code>, etc.)</li> <li>Manages function applications and argument evaluation</li> <li>Implements lexical scoping rules</li> </ul>"},{"location":"architecture/runtime/#environment-manager","title":"Environment Manager","text":"<ul> <li>Manages lexical environments and scope resolution</li> <li>Handles variable binding and lookup</li> <li>Maintains environment chains for closures</li> <li>Supports environment serialization/deserialization</li> </ul>"},{"location":"architecture/runtime/#3-prelude-layer","title":"3. Prelude Layer","text":"<p>A foundational environment provided by the host runtime containing built-in functions and constants.</p> <p>Key Properties: - Contains essential computational primitives (arithmetic, logic, list operations) - Not serialized with user code - Expected to be available in any compliant JSL runtime - Can be customized or extended by host implementations - Serves as the computational foundation for user programs</p> <p>Examples: - Arithmetic operations: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> - Comparison operators: <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>=</code> - List operations: <code>map</code>, <code>filter</code>, <code>reduce</code> - Type predicates: <code>null?</code>, <code>number?</code>, <code>string?</code></p>"},{"location":"architecture/runtime/#4-user-code-layer","title":"4. User Code Layer","text":"<p>JSL programs and libraries written by developers. These are fully serializable and portable.</p> <p>Characteristics: - Complete JSON serializability - Closure capture and reconstruction - Cross-runtime portability - Environment independence (beyond prelude)</p>"},{"location":"architecture/runtime/#5-host-interaction-layer-jhip","title":"5. Host Interaction Layer (JHIP)","text":"<p>When a JSL program evaluates a <code>[\"host\", ...]</code> form, it generates a JHIP (JSL Host Interaction Protocol) request. This layer manages the interface between pure JSL computation and external effects.</p> <p>Key Features: - Effect reification as data structures - Request-response protocol - Host authority over permitted operations - Audit trail capability - Security boundary</p>"},{"location":"architecture/runtime/#6-host-environment","title":"6. Host Environment","text":"<p>The runtime system that executes JSL code, manages resources, and enforces security policies.</p> <p>Responsibilities: - JSL interpreter hosting - JHIP request processing - Resource management - Security policy enforcement - Capability provisioning</p>"},{"location":"architecture/runtime/#serialization-architecture","title":"Serialization Architecture","text":"<p>A critical aspect of JSL's runtime architecture is its serialization system:</p>"},{"location":"architecture/runtime/#closure-serialization","title":"Closure Serialization","text":"<p>JSL <code>Closure</code> objects store: - Function parameters - Function body - Captured lexical environment (only user-defined variables)</p> <p>Serialization Process: 1. Identify free variables in closure body 2. Extract relevant bindings from lexical environment 3. Serialize environment chain (user bindings only) 4. Exclude prelude bindings (reconstructed at runtime)</p>"},{"location":"architecture/runtime/#environment-serialization","title":"Environment Serialization","text":"<p>Environments (<code>Env</code> objects) are serialized as: - Dictionary of name-to-value mappings - Parent environment reference (if applicable) - Only user-defined bindings included</p> <p>Reconstruction Process: 1. Recreate environment hierarchy 2. Restore user-defined bindings 3. Link to appropriate prelude environment 4. Validate binding completeness</p>"},{"location":"architecture/runtime/#security-model","title":"Security Model","text":"<p>JSL's architecture provides security through multiple layers:</p>"},{"location":"architecture/runtime/#capability-restriction","title":"Capability Restriction","text":"<ul> <li>All side effects must go through JHIP</li> <li>Host controls available operations</li> <li>Fine-grained permission model</li> </ul>"},{"location":"architecture/runtime/#code-safety","title":"Code Safety","text":"<ul> <li>No native code execution</li> <li>JSON-based representation prevents code injection</li> <li>Deterministic evaluation (in pure subset)</li> </ul>"},{"location":"architecture/runtime/#effect-reification","title":"Effect Reification","text":"<ul> <li>Side effects are described as data</li> <li>Host can inspect, audit, or modify requests</li> <li>Clear separation between computation and effects</li> </ul>"},{"location":"architecture/runtime/#sandboxing","title":"Sandboxing","text":"<ul> <li>JSL programs run within interpreter bounds</li> <li>No direct system access</li> <li>Host-mediated resource access only</li> </ul>"},{"location":"architecture/runtime/#implementation-considerations","title":"Implementation Considerations","text":""},{"location":"architecture/runtime/#performance","title":"Performance","text":"<ul> <li>JSON parsing overhead</li> <li>Environment lookup chains</li> <li>Closure reconstruction costs</li> <li>JHIP communication latency</li> </ul>"},{"location":"architecture/runtime/#memory-management","title":"Memory Management","text":"<ul> <li>Environment retention for closures</li> <li>Garbage collection of unused environments</li> <li>Serialization memory overhead</li> </ul>"},{"location":"architecture/runtime/#error-handling","title":"Error Handling","text":"<ul> <li>JSON parsing errors</li> <li>Runtime evaluation errors</li> <li>JHIP communication failures</li> <li>Host capability denials</li> </ul>"},{"location":"architecture/runtime/#deployment-patterns","title":"Deployment Patterns","text":""},{"location":"architecture/runtime/#distributed-computing","title":"Distributed Computing","text":"<pre><code>Client Runtime -&gt; JSON Code -&gt; Remote Runtime -&gt; Results\n</code></pre>"},{"location":"architecture/runtime/#database-functions","title":"Database Functions","text":"<pre><code>Application -&gt; Stored JSL -&gt; Database -&gt; Executed Results\n</code></pre>"},{"location":"architecture/runtime/#microservice-communication","title":"Microservice Communication","text":"<pre><code>Service A -&gt; JSL Function -&gt; Service B -&gt; Response\n</code></pre>"},{"location":"architecture/runtime/#edge-computing","title":"Edge Computing","text":"<pre><code>Central Control -&gt; JSL Logic -&gt; Edge Devices -&gt; Local Execution\n</code></pre> <p>This layered architecture ensures JSL maintains its core properties of safety, portability, and network-nativity while providing the flexibility needed for diverse deployment scenarios.</p>"},{"location":"architecture/security/","title":"Security Model","text":""},{"location":"architecture/security/#overview","title":"Overview","text":"<p>JSL's security model is built on the principle of effect reification and capability restriction. Unlike traditional languages where security is layered on top, JSL's design makes security an intrinsic property of the language itself.</p>"},{"location":"architecture/security/#core-security-principles","title":"Core Security Principles","text":"<ul> <li>No Arbitrary Code Execution: JSL code is data. This eliminates entire classes of vulnerabilities like buffer overflows and direct system calls.</li> <li>Effect Reification: All side effects are represented as data (e.g., <code>[\"host\", \"file/read\", ...]</code>). This makes them auditable, controllable, and transparent before execution.</li> <li>Host Authority: The host environment has complete control over what operations are permitted.</li> </ul>"},{"location":"architecture/security/#jsls-layered-security-model","title":"JSL's Layered Security Model","text":"<p>JSL provides two complementary models for managing security and side effects.</p>"},{"location":"architecture/security/#level-1-dispatcher-based-security-the-standard-model","title":"Level 1: Dispatcher-Based Security (The Standard Model)","text":"<p>This is the most direct security model. The host system implements a Host Command Dispatcher that is the ultimate gatekeeper for all side effects. It is simple to understand and makes all side effects syntactically obvious.</p>"},{"location":"architecture/security/#level-2-capability-based-security-the-advanced-model","title":"Level 2: Capability-Based Security (The Advanced Model)","text":"<p>This is a more advanced model for high-security applications. It uses the Environment Algebra and closures to create sandboxes that can restrict access to the <code>[\"host\", ...]</code> special form itself, providing a deeper layer of defense.</p>"},{"location":"architecture/security/#the-runtime-boundary","title":"The Runtime Boundary","text":"<p>JSL code always executes within the confines of the JSL runtime, which is itself controlled by the host system. All interactions with the outside world must cross this boundary through the JHIP protocol, giving the host the final say.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             Host System             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502        JSL Runtime            \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502\n\u2502  \u2502  \u2502     User JSL Code       \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502                         \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502  All computation here   \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502  is safe and contained  \u2502  \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502\n\u2502  \u2502                               \u2502  \u2502  \n\u2502  \u2502  Effects must go through JHIP \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                     \u2502\n\u2502  Host controls all external access  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/security/#security-best-practices","title":"Security Best Practices","text":""},{"location":"architecture/security/#for-host-implementations","title":"For Host Implementations","text":""},{"location":"architecture/security/#1-enforce-strict-resource-limits-the-gas-model","title":"1. Enforce Strict Resource Limits (The \"Gas\" Model)","text":"<p>Untrusted code can easily attempt to cause a Denial of Service. The host runtime must enforce resource limits.</p> <p>The most straightforward way to do this is to wrap every JSL evaluation in a strict timeout. This is the host's primary defense against infinite loops and other denial-of-service attacks.</p> <p>For more granular control, a host can implement a \"gas\" model, similar to those used in blockchain systems.</p> <ul> <li>How it works: The host assigns a \"gas cost\" to every JSL operation (e.g., <code>+</code> costs 1 gas, <code>map</code> costs 5 gas). A program is started with a finite amount of gas, which is consumed on each operation. If the gas runs out, execution halts.</li> <li>Benefits: This provides a predictable execution cost that is independent of machine speed.</li> </ul> <p>At a minimum, hosts should enforce simple timeouts and memory caps.</p>"},{"location":"architecture/security/#design-note-why-gas-is-a-host-level-concern","title":"Design Note: Why Gas is a Host-Level Concern","text":"<p>A natural question is why a \"gas\" model is not a mandatory, built-in part of the JSL language specification. This is a deliberate architectural decision based on JSL's core design philosophy.</p> <ul> <li> <p>To Maximize Simplicity and Portability: The primary goal of the JSL core is to be a simple, elegant, and easily embeddable evaluation engine. Forcing a complex gas accounting system into the language specification would dramatically increase the implementation burden. This would make it much harder to create compliant runtimes in different languages, undermining the goal of portability.</p> </li> <li> <p>To Maintain Flexibility: Different host environments have vastly different needs. A web server might manage resources via per-request timeouts, while a blockchain requires a strict, deterministic gas model. By defining gas as a host-level best practice rather than a language requirement, JSL remains flexible enough to be integrated naturally into any of these contexts without imposing a one-size-fits-all solution.</p> </li> </ul> <p>Keeping resource management at the host level preserves the simplicity of the core language while still providing a clear and robust pattern for building secure, production-ready systems.</p>"},{"location":"architecture/security/#2-implement-the-principle-of-least-capability","title":"2. Implement the Principle of Least Capability","text":"<p>When designing host commands, always expose the most specific, narrowly-scoped capability possible. Avoid creating general-purpose \"escape hatches.\"</p> <p>A good example is a specific, auditable capability for reading a config file: <pre><code>[\"def\", \"config\", [\"host\", \"file/read\", \"/app/data/config.json\"]]\n</code></pre></p> <p>A dangerous, overly broad capability would be: <pre><code>[\"def\", \"config\", [\"host\", \"shell\", \"cat /app/data/config.json\"]]\n</code></pre> A specific command like <code>file/read</code> can be easily secured and audited by the host dispatcher. A <code>shell</code> command is a black box that subverts JSL's security model.</p>"},{"location":"architecture/security/#3-maintain-detailed-audit-logs","title":"3. Maintain Detailed Audit Logs","text":"<p>Because all side effects are reified as data, the host can create a perfect audit trail. Every <code>[\"host\", ...]</code> request should be logged with a timestamp, the source of the code, the full request, and the outcome. This is invaluable for security analysis and incident response.</p>"},{"location":"architecture/security/#for-jsl-code-developers","title":"For JSL Code Developers","text":""},{"location":"architecture/security/#1-never-trust-input","title":"1. Never Trust Input","text":"<p>Just as in any other language, you must treat all data coming from an external source as untrusted.</p> <p>This example shows a function that expects a number for a calculation. It validates the input's type before using it. <pre><code>[\"def\", \"calculate\",\n  [\"lambda\", [\"input\"],\n    [\"if\", [\"is_num\", \"input\"],\n      [\"*\", \"input\", 10],\n      [\"error\", \"InvalidInput\", \"Expected a number\"]\n    ]\n  ]\n]\n</code></pre> Always validate the type and structure of data before using it in your logic.</p>"},{"location":"architecture/security/#2-handle-errors-gracefully","title":"2. Handle Errors Gracefully","text":"<p>Host commands can fail for many reasons. Robust JSL code should anticipate these failures using the <code>try</code> special form.</p> <p>This example attempts to read a configuration file, but returns a default value if it fails, logging the error as a warning. <pre><code>[\"try\",\n  [\"host\", \"file/read\", \"/app/config.json\"],\n  [\"lambda\", [\"err\"],\n    [\"do\",\n      [\"host\", \"log/warn\", [\"@\", \"Config not found, using default: \", [\"get\", \"err\", \"message\"]]],\n      { \"default_setting\": true }\n    ]\n  ]\n]\n</code></pre> This prevents unexpected host errors from crashing your entire program.</p>"},{"location":"architecture/serialization/","title":"Code and Data Serialization","text":"<p>For a conceptual overview of JSL environments and the operations you can perform on them, see the Environments language guide.</p>"},{"location":"architecture/serialization/#overview","title":"Overview","text":"<p>Serialization is fundamental to JSL's design philosophy. Since JSL code is JSON, any JSL program is already in a transmittable format. However, to capture the full, executable state of a program\u2014including functions with captured lexical environments (closures)\u2014JSL defines a canonical serialization payload.</p> <p>This structure enables true code mobility, persistence, and robust distributed computing patterns.</p>"},{"location":"architecture/serialization/#the-serialized-state-payload","title":"The Serialized State Payload","text":"<p>When a JSL state is serialized, the payload includes three key parts. This is the standard, canonical format for all JSL state serialization.</p> <ol> <li><code>prelude_hash</code>: A hash representing the version of the core prelude functions the code depends on. This allows a receiving system to verify runtime compatibility.</li> <li><code>environments</code>: A key-value map where each key is the content-hash of an environment, and the value is the environment object itself. This is the \"environment store.\"</li> <li><code>result</code>: The final value of the computation. If it's a closure, it will reference an environment by its hash.</li> </ol>"},{"location":"architecture/serialization/#the-environment-object-and-hashing","title":"The Environment Object and Hashing","text":"<p>An Environment Object is the serializable representation of a scope. It has a simple, immutable structure: - <code>bindings</code>: A JSON object mapping local variable names to their values. - <code>parent</code>: The hash of the parent environment, or <code>null</code> for the global scope. A <code>null</code> parent indicates the end of the user-defined scope chain; the evaluator will then fall back to the system prelude for lookups.</p> <p>The hash of an environment is calculated over its entire content, including the hash of its parent. This creates a recursive hash chain which guarantees that an environment's hash uniquely and securely identifies its entire lexical ancestry.</p>"},{"location":"architecture/serialization/#serialization-walkthrough","title":"Serialization Walkthrough","text":"<p>Consider this nested closure example: <pre><code>[\"do\",\n  [\"def\", \"base\", 100],\n  [\"def\", \"make_adder\",\n    [\"lambda\", [\"increment\"],\n      [\"lambda\", [\"x\"], [\"+\", \"x\", \"increment\", \"base\"]]]],\n  [\"def\", \"add_5\", [\"make_adder\", 5]],\n  \"add_5\"\n]\n</code></pre></p> <p>When evaluated, this produces a final closure (<code>add_5</code>). The complete, serialized state payload would look like this: <pre><code>{\n  \"prelude_hash\": \"PRELUDE_HASH_XYZ\",\n  \"result\": {\n    \"type\": \"closure\",\n    \"params\": [\"x\"],\n    \"body\": [\"+\", \"x\", \"increment\", \"base\"],\n    \"env_hash\": \"H1\"\n  },\n  \"environments\": {\n    \"H0\": {\n      \"bindings\": { \"base\": 100 },\n      \"parent\": null\n    },\n    \"H1\": {\n      \"bindings\": { \"increment\": 5 },\n      \"parent\": \"H0\"\n    }\n  }\n}\n</code></pre> This content-addressable model is highly efficient, avoids data duplication, and correctly represents shared and nested environments in a purely serializable way.</p>"},{"location":"architecture/serialization/#serialization-patterns","title":"Serialization Patterns","text":"<p>The following patterns demonstrate how the canonical serialized state payload can be used.</p>"},{"location":"architecture/serialization/#network-transmission","title":"Network Transmission","text":"<p>The payload can be sent directly as the body of an HTTP request to a remote JSL node for execution.</p> <pre><code>POST /execute HTTP/1.1\nContent-Type: application/json\nX-JSL-Prelude-Hash: PRELUDE_HASH_XYZ\n\n{\n  \"result\": {\n    \"type\": \"closure\",\n    \"params\": [\"x\"],\n    \"body\": [\"+\", \"x\", \"increment\", \"base\"],\n    \"env_hash\": \"H1\"\n  },\n  \"environments\": {\n    \"H0\": { \"bindings\": { \"base\": 100 }, \"parent\": null },\n    \"H1\": { \"bindings\": { \"increment\": 5 }, \"parent\": \"H0\" }\n  }\n}\n</code></pre>"},{"location":"architecture/serialization/#code-storage","title":"Code Storage","text":"<p>The entire payload can be stored in a database (e.g., in a JSONB column) to persist a function, a user's workflow state, or a configuration template.</p> <pre><code>INSERT INTO jsl_functions (name, payload) VALUES (\n  'add_five_function',\n  '{\n    \"prelude_hash\": \"PRELUDE_HASH_XYZ\",\n    \"result\": {\n      \"type\": \"closure\",\n      \"params\": [\"x\"],\n      \"body\": [\"+\", \"x\", \"increment\", \"base\"],\n      \"env_hash\": \"H1\"\n    },\n    \"environments\": {\n      \"H0\": { \"bindings\": { \"base\": 100 }, \"parent\": null },\n      \"H1\": { \"bindings\": { \"increment\": 5 }, \"parent\": \"H0\" }\n    }\n  }'::JSONB\n);\n</code></pre>"},{"location":"architecture/serialization/#object-serialization","title":"Object Serialization","text":"<p>JSON objects with embedded code serialize cleanly:</p> <pre><code>{\n  \"response_object\": {\n    \"@status\": \"@success\",\n    \"@user\": \"username\",\n    \"@computed_score\": [\"*\", \"base_score\", \"multiplier\"],\n    \"@timestamp\": [\"host\", \"time/now\"]\n  }\n}\n</code></pre> <p>When evaluated, this produces a pure JSON object with all expressions resolved.</p>"},{"location":"architecture/serialization/#conclusion","title":"Conclusion","text":"<p>JSL's serialization model is designed for simplicity, efficiency, and portability. By leveraging JSON as the underlying format, JSL ensures that code can be easily transmitted, stored, and executed across different environments without loss of fidelity or context.</p>"},{"location":"examples/advanced/","title":"Advanced JSL Examples","text":""},{"location":"examples/advanced/#distributed-computing","title":"Distributed Computing","text":"<p>This example demonstrates a map-reduce implementation for word counting.</p> <pre><code>[\"let\", [\n  [\"map-reduce\",\n    [\"lambda\", [\"data\", \"map-fn\", \"reduce-fn\"],\n      [\"let\", [[\"mapped\", [\"map\", \"map-fn\", \"data\"]]],\n        [\"reduce\", \"reduce-fn\", {}, \"mapped\"]]]],\n\n  [\"word-count\",\n    [\"lambda\", [\"text\"],\n      [\"let\", [\n        [\"words\", [\"str-split\", [\"str-lower\", \"text\"], \"@ \"]],\n        [\"count-word\", \n          [\"lambda\", [\"acc\", \"word\"],\n            [\"set\", \"acc\", \"word\", \n              [\"+\", [\"get\", \"acc\", \"word\", 0], 1]]]]\n      ],\n        [\"reduce\", \"count-word\", {}, \"words\"]]]]\n],\n  [\"word-count\", \"@The quick brown fox jumps over the lazy dog\"]\n]\n</code></pre>"},{"location":"examples/advanced/#closure-serialization","title":"Closure Serialization","text":"<p>This example shows how a closure can be serialized to JSON, then deserialized and executed.</p> <pre><code>[\"let\", [\n  [\"create-adder\",\n    [\"lambda\", [\"n\"],\n      [\"lambda\", [\"x\"], [\"+\", \"x\", \"n\"]]]],\n\n  [\"add-five\", [\"create-adder\", 5]],\n  [\"serialized\", [\"serialize\", \"add-five\"]],\n  [\"restored\", [\"deserialize\", \"serialized\"]]\n],\n  [\"restored\", 10]\n]\n</code></pre> <p>Result: <code>15</code> - The closure maintains its captured environment even after serialization.</p>"},{"location":"examples/advanced/#dynamic-configuration-objects","title":"Dynamic Configuration Objects","text":"<p>Build configuration objects that adapt based on environment settings.</p> <pre><code>[\"let\", [\n  [\"env\", \"@production\"],\n  [\"is-prod\", [\"=\", \"env\", \"@production\"]],\n  [\"db-host\", [\"if\", \"is-prod\", \"@db.prod.example.com\", \"@localhost\"]]\n],\n  {\n    \"@database\": {\n      \"@host\": \"db-host\",\n      \"@port\": [\"if\", \"is-prod\", 5432, 5433],\n      \"@name\": [\"str-concat\", \"@myapp_\", \"env\"],\n      \"@ssl\": \"is-prod\",\n      \"@pool_size\": [\"if\", \"is-prod\", 20, 5]\n    },\n    \"@services\": {\n      \"@auth\": {\n        \"@url\": [\"str-concat\", \"@https://auth.\", \"env\", \"@.example.com\"],\n        \"@timeout\": [\"if\", \"is-prod\", 5000, 30000]\n      },\n      \"@cache\": {\n        \"@enabled\": \"is-prod\",\n        \"@ttl\": [\"if\", \"is-prod\", 3600, 300]\n      }\n    }\n  }\n]\n</code></pre>"},{"location":"examples/advanced/#memoization-pattern","title":"Memoization Pattern","text":"<p>Create a memoized version of expensive computations.</p> <pre><code>[\"let\", [\n  [\"memoize\",\n    [\"lambda\", [\"fn\"],\n      [\"let\", [[\"cache\", {}]],\n        [\"lambda\", [\"arg\"],\n          [\"let\", [[\"key\", [\"str\", \"arg\"]]],\n            [\"if\", [\"has\", \"cache\", \"key\"],\n              [\"get\", \"cache\", \"key\"],\n              [\"let\", [[\"result\", [\"fn\", \"arg\"]]],\n                [\"do\",\n                  [\"set\", \"cache\", \"key\", \"result\"],\n                  \"result\"]]]]]]]],\n\n  [\"fibonacci\",\n    [\"lambda\", [\"n\"],\n      [\"if\", [\"&lt;=\", \"n\", 1],\n        \"n\",\n        [\"+\", \n          [\"fibonacci\", [\"-\", \"n\", 1]], \n          [\"fibonacci\", [\"-\", \"n\", 2]]]]]],\n\n  [\"fast-fib\", [\"memoize\", \"fibonacci\"]]\n],\n  [\"map\", \"fast-fib\", [\"@\", [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]\n]\n</code></pre>"},{"location":"examples/advanced/#pipeline-processing","title":"Pipeline Processing","text":"<p>Build a data processing pipeline with error handling.</p> <pre><code>[\"let\", [\n  [\"pipeline\",\n    [\"lambda\", [\"data\", \"transformations\"],\n      [\"reduce\",\n        [\"lambda\", [\"acc\", \"transform\"],\n          [\"try\",\n            [\"transform\", \"acc\"],\n            [\"lambda\", [\"err\"],\n              {\"@error\": true, \n               \"@message\": [\"get\", \"err\", \"@message\"],\n               \"@data\": \"acc\"}]]],\n        \"data\",\n        \"transformations\"]]],\n\n  [\"validate-user\",\n    [\"lambda\", [\"user\"],\n      [\"if\", [\"and\",\n              [\"has\", \"user\", \"@email\"],\n              [\"str-contains\", [\"get\", \"user\", \"@email\"], \"@@\"]],\n        \"user\",\n        [\"error\", \"@Invalid email\"]]]],\n\n  [\"enrich-user\",\n    [\"lambda\", [\"user\"],\n      [\"set\", \"user\", \"@id\", \n        [\"str-concat\", \"@user_\", [\"str\", [\"random-int\", 1000, 9999]]]]]],\n\n  [\"user-data\", {\"@name\": \"@Alice\", \"@email\": \"@alice@example.com\"}]\n],\n  [\"pipeline\", \"user-data\", [\"@\", [\"validate-user\", \"enrich-user\"]]]\n]\n</code></pre>"},{"location":"examples/advanced/#key-advanced-patterns","title":"Key Advanced Patterns","text":"<ol> <li>Map-Reduce - Process large datasets in a functional way</li> <li>Closure Serialization - Send functions with their context over the network</li> <li>Dynamic Objects - Build configuration that adapts to runtime conditions</li> <li>Memoization - Cache expensive computations transparently</li> <li>Pipeline Processing - Chain transformations with error handling</li> </ol>"},{"location":"examples/practical/","title":"Practical JSL Examples","text":"<p>These examples demonstrate core JSL patterns for real-world programming tasks.</p>"},{"location":"examples/practical/#data-processing","title":"Data Processing","text":""},{"location":"examples/practical/#filtering-and-transforming-lists","title":"Filtering and Transforming Lists","text":"<p>Extract email addresses from active users:</p> <pre><code>[\"let\", [\n  [\"users\", [\"@\", [\n    {\"@name\": \"@Alice\", \"@email\": \"@alice@example.com\", \"@active\": true},\n    {\"@name\": \"@Bob\", \"@email\": \"@bob@example.com\", \"@active\": false},\n    {\"@name\": \"@Charlie\", \"@email\": \"@charlie@example.com\", \"@active\": true}\n  ]]],\n  [\"active-emails\", \n    [\"map\",\n      [\"lambda\", [\"user\"], [\"get\", \"user\", \"@email\"]],\n      [\"filter\",\n        [\"lambda\", [\"user\"], [\"get\", \"user\", \"@active\"]],\n        \"users\"]]]\n],\n  \"active-emails\"\n]\n</code></pre> <p>Result: <code>[\"alice@example.com\", \"charlie@example.com\"]</code></p>"},{"location":"examples/practical/#file-operations","title":"File Operations","text":""},{"location":"examples/practical/#reading-and-processing-a-file","title":"Reading and Processing a File","text":"<p>Read a configuration file and parse it:</p> <pre><code>[\"let\", [\n  [\"config-path\", \"@/app/config.json\"],\n  [\"config\", [\"try\",\n    [\"json-parse\", [\"host\", \"file/read\", \"config-path\"]],\n    [\"lambda\", [\"err\"], \n      {\"@debug\": false, \"@timeout\": 30}]]]\n],\n  [\"get\", \"config\", \"@debug\", false]\n]\n</code></pre> <p>This safely reads a JSON config file with a fallback default if the file doesn't exist.</p>"},{"location":"examples/practical/#dynamic-configuration","title":"Dynamic Configuration","text":""},{"location":"examples/practical/#environment-based-settings","title":"Environment-Based Settings","text":"<p>Build configuration that adapts to the current environment:</p> <pre><code>[\"let\", [\n  [\"env\", \"@production\"],\n  [\"is-prod\", [\"=\", \"env\", \"@production\"]]\n],\n  {\n    \"@app\": \"@my-service\",\n    \"@database\": {\n      \"@host\": [\"if\", \"is-prod\", \"@db.prod.example.com\", \"@localhost\"],\n      \"@port\": 5432,\n      \"@pool_size\": [\"if\", \"is-prod\", 20, 5]\n    },\n    \"@logging\": {\n      \"@level\": [\"if\", \"is-prod\", \"@warn\", \"@debug\"],\n      \"@format\": \"@json\"\n    }\n  }\n]\n</code></pre>"},{"location":"examples/practical/#api-request-with-error-handling","title":"API Request with Error Handling","text":""},{"location":"examples/practical/#safe-http-request","title":"Safe HTTP Request","text":"<p>Fetch user data with proper error handling:</p> <pre><code>[\"let\", [\n  [\"fetch-user\",\n    [\"lambda\", [\"id\"],\n      [\"try\",\n        [\"host\", \"http/get\", [\"str-concat\", \"@/api/users/\", \"id\"]],\n        [\"lambda\", [\"err\"],\n          {\"@error\": true, \"@message\": [\"get\", \"err\", \"@message\"]}]]]]\n],\n  [\"fetch-user\", \"@12345\"]\n]\n</code></pre>"},{"location":"examples/practical/#key-patterns-demonstrated","title":"Key Patterns Demonstrated","text":"<ol> <li><code>let</code> for functional bindings - Clean variable scoping without mutation</li> <li>First-class objects - JSON objects as native data structures  </li> <li>Error handling with <code>try</code> - Graceful failure recovery</li> <li>Higher-order functions - <code>map</code> and <code>filter</code> for data transformation</li> <li>Dynamic values - Computing object properties with expressions</li> </ol>"},{"location":"examples/simple/","title":"Simple JSL Examples","text":""},{"location":"examples/simple/#basic-arithmetic","title":"Basic Arithmetic","text":"<pre><code>// Addition\n[\"+\", 5, 3]\n// Result: 8\n\n// Multiplication  \n[\"*\", 4, 6]\n// Result: 24\n\n// Nested operations\n[\"+\", [\"*\", 2, 3], [\"*\", 4, 5]]\n// Result: 26\n</code></pre>"},{"location":"examples/simple/#variables-and-functions","title":"Variables and Functions","text":"<pre><code>// Define and use variables with let\n[\"let\", [\n  [\"x\", 10],\n  [\"y\", 20]\n],\n  [\"+\", \"x\", \"y\"]\n]\n// Result: 30\n\n// Define and use a function\n[\"let\", [\n  [\"double\", [\"lambda\", [\"n\"], [\"*\", \"n\", 2]]]\n],\n  [\"double\", 5]\n]\n// Result: 10\n</code></pre>"},{"location":"examples/simple/#working-with-lists","title":"Working with Lists","text":"<pre><code>// Creating lists with quote\n[\"let\", [\n  [\"numbers\", [\"@\", [1, 2, 3, 4, 5]]],\n  [\"double\", [\"lambda\", [\"x\"], [\"*\", \"x\", 2]]]\n],\n  [\"map\", \"double\", \"numbers\"]\n]\n// Result: [2, 4, 6, 8, 10]\n\n// Creating lists with the list function\n[\"let\", [\n  [\"numbers\", [\"list\", 1, 2, 3, 4, 5]],\n  [\"is-even\", [\"lambda\", [\"x\"], [\"=\", [\"mod\", \"x\", 2], 0]]]\n],\n  [\"filter\", \"is-even\", \"numbers\"]\n]\n// Result: [2, 4]\n</code></pre>"},{"location":"examples/simple/#conditional-logic","title":"Conditional Logic","text":"<pre><code>// Simple if expression\n[\"if\", [\"&gt;\", 10, 5], \"@yes\", \"@no\"]\n// Result: \"yes\"\n\n// Function with conditional logic\n[\"let\", [\n  [\"check-age\", \n    [\"lambda\", [\"age\"],\n      [\"if\", [\"&gt;=\", \"age\", 18], \"@adult\", \"@minor\"]]]\n],\n  [\"list\",\n    [\"check-age\", 25],  // Result: \"adult\"\n    [\"check-age\", 15]   // Result: \"minor\"\n  ]\n]\n</code></pre>"},{"location":"examples/simple/#working-with-objects","title":"Working with Objects","text":"<pre><code>// Create an object with computed values\n[\"let\", [\n  [\"name\", \"@Alice\"],\n  [\"age\", 30]\n],\n  {\"@user\": \"name\", \n   \"@adult\": [\"&gt;=\", \"age\", 18]}\n]\n// Result: {\"user\": \"Alice\", \"adult\": true}\n\n// Access object properties\n[\"let\", [\n  [\"person\", {\"@name\": \"@Bob\", \"@age\": 25}]\n],\n  [\"get\", \"person\", \"@name\"]\n]\n// Result: \"Bob\"\n</code></pre>"},{"location":"jhip/host-commands/","title":"Host Commands","text":""},{"location":"jhip/host-commands/#overview","title":"Overview","text":"<p>JHIP defines the protocol structure for host interactions, but all commands are host-specific and defined by individual host implementations. Each JSL host chooses which commands to support based on their specific environment and use cases. This extensibility allows JSL to integrate with any system while maintaining the security and audit benefits of the JHIP protocol.</p> <p>There are no \"built-in\" or \"standard\" commands - JHIP is purely a communication protocol. However, community conventions have emerged for common operations.</p>"},{"location":"jhip/host-commands/#community-conventions","title":"Community Conventions","text":"<p>While hosts define their own command sets, these naming patterns are commonly used:</p>"},{"location":"jhip/host-commands/#file-system-operations","title":"File System Operations","text":"<pre><code>[\"host\", \"@file/read\", \"@/path/to/file\"]\n[\"host\", \"@file/write\", \"@/path/to/file\", \"@content\"]\n[\"host\", \"@file/exists\", \"@/path/to/file\"]\n[\"host\", \"@file/list\", \"@/path/to/directory\"]\n[\"host\", \"@file/delete\", \"@/path/to/file\"]\n</code></pre>"},{"location":"jhip/host-commands/#http-operations","title":"HTTP Operations","text":"<pre><code>[\"host\", \"@http/get\", \"@https://api.example.com/data\"]\n[\"host\", \"@http/post\", \"@https://api.example.com/submit\", {\"@key\": \"@value\"}]\n[\"host\", \"@http/put\", \"@https://api.example.com/update\", {\"@data\": \"@updated\"}]\n[\"host\", \"@http/delete\", \"@https://api.example.com/item/123\"]\n</code></pre>"},{"location":"jhip/host-commands/#logging-operations","title":"Logging Operations","text":"<pre><code>[\"host\", \"@log/debug\", \"@Debug message\", {\"@context\": \"@additional info\"}]\n[\"host\", \"@log/info\", \"@Application started successfully\"]\n[\"host\", \"@log/warn\", \"@Warning message\"]\n[\"host\", \"@log/error\", \"@Error occurred\", {\"@error_code\": 500}]\n</code></pre>"},{"location":"jhip/host-commands/#system-operations","title":"System Operations","text":"<pre><code>[\"host\", \"@env/get\", \"@PATH\"]\n[\"host\", \"@time/now\"]\n[\"host\", \"@time/format\", \"@2025-01-01T12:00:00Z\", \"@YYYY-MM-DD\"]\n[\"host\", \"@random/uuid\"]\n[\"host\", \"@process/exec\", \"@ls\", [\"@\", [\"@-la\", \"@/tmp\"]]]\n</code></pre>"},{"location":"jhip/host-commands/#database-operations","title":"Database Operations","text":"<pre><code>[\"host\", \"@db/query\", \"@SELECT * FROM users WHERE active = ?\", [\"@\", [true]]]\n[\"host\", \"@db/transaction\", [\"@\", [\n  [\"@INSERT INTO logs (message) VALUES (?)\", [\"@\", [\"@Log entry 1\"]]],\n  [\"@INSERT INTO logs (message) VALUES (?)\", [\"@\", [\"@Log entry 2\"]]]\n]]]\n</code></pre>"},{"location":"jhip/host-commands/#cryptographic-operations","title":"Cryptographic Operations","text":"<pre><code>[\"host\", \"@crypto/hash\", \"@sha256\", \"@data to hash\"]\n[\"host\", \"@crypto/random\", 32]\n</code></pre>"},{"location":"jhip/host-commands/#command-design-principles","title":"Command Design Principles","text":""},{"location":"jhip/host-commands/#naming-conventions","title":"Naming Conventions","text":"<p>Host commands should follow a hierarchical naming structure:</p> <pre><code>&lt;namespace&gt;/&lt;category&gt;/&lt;operation&gt;\n</code></pre> <p>Examples: - <code>myapp/user/create</code> - <code>aws/s3/upload</code> - <code>database/postgres/query</code> - <code>ml/tensorflow/predict</code></p>"},{"location":"jhip/host-commands/#command-categories","title":"Command Categories","text":""},{"location":"jhip/host-commands/#cloud-services","title":"Cloud Services","text":"<pre><code>[\"host\", \"@aws/s3/upload\", \"@bucket-name\", \"@key\", \"data\"]\n[\"host\", \"@gcp/storage/download\", \"@bucket\", \"@object\"]\n[\"host\", \"@azure/blob/delete\", \"@container\", \"@blob-name\"]\n</code></pre>"},{"location":"jhip/host-commands/#machine-learning","title":"Machine Learning","text":"<pre><code>[\"host\", \"@tensorflow/predict\", \"@model-id\", {\"@features\": [\"@\", [1, 2, 3]]}]\n[\"host\", \"@pytorch/train\", \"@model-config\", \"training-data\"]\n</code></pre>"},{"location":"jhip/host-commands/#business-logic","title":"Business Logic","text":"<pre><code>[\"host\", \"@ecommerce/order/create\", {\"@product\": \"@123\", \"@quantity\": 2}]\n[\"host\", \"@crm/contact/update\", \"@contact-id\", {\"@email\": \"@new@example.com\"}]\n</code></pre>"},{"location":"jhip/host-commands/#implementation-guidelines","title":"Implementation Guidelines","text":""},{"location":"jhip/host-commands/#command-handler-interface","title":"Command Handler Interface","text":"<pre><code>class HostCommandHandler:\n    def __init__(self, command_id: str):\n        self.command_id = command_id\n\n    def validate_args(self, args: list) -&gt; bool:\n        \"\"\"Validate command arguments\"\"\"\n        # Implement argument validation\n        pass\n\n    def execute(self, args: list) -&gt; any:\n        \"\"\"Execute the command and return result\"\"\"\n        # Implement command logic\n        pass\n\n    def get_permissions(self) -&gt; list:\n        \"\"\"Return required permissions for this command\"\"\"\n        # Return list of required permissions\n        pass\n</code></pre>"},{"location":"jhip/host-commands/#registration-pattern","title":"Registration Pattern","text":"<pre><code># Register host command handlers\njsl_host.register_command(\"file/read\", FileReadHandler())\njsl_host.register_command(\"http/get\", HttpGetHandler())\njsl_host.register_command(\"myapp/user/create\", UserCreateHandler())\n</code></pre>"},{"location":"jhip/host-commands/#error-handling","title":"Error Handling","text":"<p>All commands must return errors in standard JHIP format:</p> <pre><code>{\n  \"$jsl_error\": {\n    \"type\": \"CommandError\",\n    \"message\": \"File not found\",\n    \"details\": {\n      \"command\": \"file/read\",\n      \"path\": \"/nonexistent/file\"\n    }\n  }\n}\n</code></pre>"},{"location":"jhip/host-commands/#example-command-implementations","title":"Example Command Implementations","text":""},{"location":"jhip/host-commands/#file-read-command","title":"File Read Command","text":"<pre><code>class FileReadHandler(HostCommandHandler):\n    def validate_args(self, args: list) -&gt; bool:\n        return len(args) == 1 and isinstance(args[0], str)\n\n    def execute(self, args: list) -&gt; str:\n        path = args[0]\n        try:\n            with open(path, 'r') as file:\n                return file.read()\n        except FileNotFoundError:\n            return {\n                \"$jsl_error\": {\n                    \"type\": \"FileNotFound\",\n                    \"message\": f\"File does not exist: {path}\",\n                    \"details\": {\"path\": path, \"operation\": \"file/read\"}\n                }\n            }\n        except PermissionError:\n            return {\n                \"$jsl_error\": {\n                    \"type\": \"PermissionDenied\", \n                    \"message\": f\"Permission denied: {path}\",\n                    \"details\": {\"path\": path, \"operation\": \"file/read\"}\n                }\n            }\n\n    def get_permissions(self) -&gt; list:\n        return [\"file.read\"]\n</code></pre>"},{"location":"jhip/host-commands/#http-get-command","title":"HTTP GET Command","text":"<pre><code>import requests\n\nclass HttpGetHandler(HostCommandHandler):\n    def validate_args(self, args: list) -&gt; bool:\n        return len(args) &gt;= 1 and isinstance(args[0], str)\n\n    def execute(self, args: list) -&gt; dict:\n        url = args[0]\n        headers = args[1] if len(args) &gt; 1 else {}\n\n        try:\n            response = requests.get(url, headers=headers, timeout=30)\n            return {\n                \"status\": response.status_code,\n                \"headers\": dict(response.headers),\n                \"body\": response.text\n            }\n        except requests.exceptions.Timeout:\n            return {\n                \"$jsl_error\": {\n                    \"type\": \"NetworkError\",\n                    \"message\": \"Request timeout\",\n                    \"details\": {\"url\": url, \"timeout_ms\": 30000}\n                }\n            }\n        except requests.exceptions.ConnectionError:\n            return {\n                \"$jsl_error\": {\n                    \"type\": \"NetworkError\", \n                    \"message\": \"Connection failed\",\n                    \"details\": {\"url\": url}\n                }\n            }\n\n    def get_permissions(self) -&gt; list:\n        return [\"network.http\"]\n</code></pre>"},{"location":"jhip/host-commands/#custom-business-logic-command","title":"Custom Business Logic Command","text":"<pre><code>class UserCreateHandler(HostCommandHandler):\n    def validate_args(self, args: list) -&gt; bool:\n        if len(args) != 1 or not isinstance(args[0], dict):\n            return False\n\n        user_data = args[0]\n        required_fields = [\"email\", \"name\"]\n        return all(field in user_data for field in required_fields)\n\n    def execute(self, args: list) -&gt; dict:\n        user_data = args[0]\n\n        # Validate email format\n        import re\n        if not re.match(r\"[^@]+@[^@]+\\.[^@]+\", user_data[\"email\"]):\n            return {\n                \"$jsl_error\": {\n                    \"type\": \"ValidationError\",\n                    \"message\": \"Invalid email format\",\n                    \"details\": {\"field\": \"email\", \"value\": user_data[\"email\"]}\n                }\n            }\n\n        # Check for duplicate email\n        if self.email_exists(user_data[\"email\"]):\n            return {\n                \"$jsl_error\": {\n                    \"type\": \"DuplicateError\",\n                    \"message\": \"Email already exists\",\n                    \"details\": {\"field\": \"email\", \"value\": user_data[\"email\"]}\n                }\n            }\n\n        # Create user\n        user_id = self.create_user_in_database(user_data)\n\n        return {\n            \"user_id\": user_id,\n            \"email\": user_data[\"email\"],\n            \"created_at\": datetime.utcnow().isoformat()\n        }\n\n    def get_permissions(self) -&gt; list:\n        return [\"user.create\"]\n</code></pre>"},{"location":"jhip/host-commands/#security-considerations","title":"Security Considerations","text":""},{"location":"jhip/host-commands/#permission-system","title":"Permission System","text":"<pre><code>class PermissionChecker:\n    def check_command_permission(self, command_id: str, user_context: dict) -&gt; bool:\n        # Example permission logic\n        user_permissions = user_context.get(\"permissions\", [])\n\n        # Admin bypass\n        if \"admin\" in user_context.get(\"roles\", []):\n            return True\n\n        # Check specific command permissions\n        if command_id.startswith(\"file/\"):\n            return \"file.access\" in user_permissions\n\n        if command_id.startswith(\"http/\"):\n            return \"network.http\" in user_permissions\n\n        # Custom business logic permissions\n        if command_id.startswith(\"myapp/\"):\n            return f\"myapp.{command_id.split('/')[-1]}\" in user_permissions\n\n        return False\n</code></pre>"},{"location":"jhip/host-commands/#input-validation","title":"Input Validation","text":"<pre><code>def validate_command_args(command_id: str, args: list):\n    \"\"\"Validate arguments for security and correctness\"\"\"\n\n    if command_id == \"file/read\":\n        if len(args) != 1 or not isinstance(args[0], str):\n            raise ValueError(\"file/read requires exactly one string argument\")\n\n        # Prevent directory traversal\n        path = os.path.normpath(args[0])\n        if path.startswith(\"../\") or \"/../\" in path:\n            raise ValueError(\"Directory traversal not allowed\")\n\n    elif command_id == \"process/exec\":\n        if len(args) &lt; 1:\n            raise ValueError(\"process/exec requires at least one argument\")\n\n        # Whitelist allowed commands\n        allowed_commands = [\"ls\", \"cat\", \"echo\", \"date\"]\n        if args[0] not in allowed_commands:\n            raise ValueError(f\"Command not allowed: {args[0]}\")\n</code></pre>"},{"location":"jhip/host-commands/#resource-limits","title":"Resource Limits","text":"<pre><code>class ResourceLimiter:\n    def __init__(self):\n        self.limits = {\n            \"max_execution_time\": 30,  # seconds\n            \"max_memory_usage\": 100 * 1024 * 1024,  # 100MB\n            \"max_file_size\": 10 * 1024 * 1024,  # 10MB\n            \"max_network_requests_per_minute\": 60\n        }\n        self.usage_tracking = {}\n\n    def check_limits(self, command_id: str, user_id: str):\n        # Implement rate limiting and resource checking\n        current_time = time.time()\n\n        # Check rate limits\n        user_requests = self.usage_tracking.get(user_id, [])\n        recent_requests = [t for t in user_requests if current_time - t &lt; 60]\n\n        if len(recent_requests) &gt;= self.limits[\"max_network_requests_per_minute\"]:\n            raise Exception(\"Rate limit exceeded\")\n\n        # Track this request\n        self.usage_tracking[user_id] = recent_requests + [current_time]\n</code></pre>"},{"location":"jhip/host-commands/#testing-host-commands","title":"Testing Host Commands","text":""},{"location":"jhip/host-commands/#unit-testing","title":"Unit Testing","text":"<pre><code>def test_file_read_command():\n    handler = FileReadHandler()\n\n    # Test successful read\n    with tempfile.NamedTemporaryFile(mode='w', delete=False) as f:\n        f.write(\"test content\")\n        f.flush()\n\n        result = handler.execute([f.name])\n        assert result == \"test content\"\n\n    # Test file not found\n    result = handler.execute([\"/nonexistent/file\"])\n    assert \"$jsl_error\" in result\n    assert result[\"$jsl_error\"][\"type\"] == \"FileNotFound\"\n</code></pre>"},{"location":"jhip/host-commands/#integration-testing","title":"Integration Testing","text":"<pre><code>def test_command_through_jsl():\n    # Test command through JSL runtime\n    jsl_code = [\"host\", \"@file/read\", \"@/tmp/test.txt\"]\n\n    # Mock the host command\n    with patch('jsl_host.execute_command') as mock_execute:\n        mock_execute.return_value = \"mocked file content\"\n\n        result = jsl_runtime.evaluate(jsl_code)\n        assert result == \"mocked file content\"\n\n        mock_execute.assert_called_once_with(\"file/read\", [\"/tmp/test.txt\"])\n</code></pre>"},{"location":"jhip/host-commands/#documentation-template","title":"Documentation Template","text":"<p>Use this template when documenting host commands:</p> <p>Command: <code>myapp/user/create</code></p> <p>Description: Creates a new user account in the system.</p> <p>Parameters: - <code>user_data</code> (object): User information   - <code>email</code> (string, required): User's email address   - <code>name</code> (string, required): User's full name   - <code>role</code> (string, optional): User role, defaults to \"user\"</p> <p>Returns:  - <code>user_id</code> (string): Unique identifier for created user - <code>email</code> (string): Confirmed email address - <code>created_at</code> (string): ISO timestamp of creation</p> <p>Permissions Required: <code>user.create</code></p> <p>Example: <pre><code>[\"host\", \"@myapp/user/create\", {\n  \"@email\": \"@john@example.com\",\n  \"@name\": \"@John Doe\",\n  \"@role\": \"@editor\"\n}]\n</code></pre></p> <p>Error Types: - <code>DUPLICATE_EMAIL</code>: Email address already exists - <code>INVALID_EMAIL</code>: Email format is invalid - <code>PERMISSION_DENIED</code>: Insufficient permissions</p>"},{"location":"jhip/host-commands/#best-practices","title":"Best Practices","text":""},{"location":"jhip/host-commands/#design-guidelines","title":"Design Guidelines","text":"<ol> <li>Atomic Operations: Commands should perform single, well-defined operations</li> <li>Idempotency: Where possible, commands should be idempotent</li> <li>Error Transparency: Provide clear, actionable error messages</li> <li>Resource Efficiency: Minimize resource usage and implement proper cleanup</li> <li>Backward Compatibility: Maintain compatibility when updating commands</li> </ol>"},{"location":"jhip/host-commands/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Caching: Cache frequently accessed data</li> <li>Connection Pooling: Reuse database and network connections</li> <li>Async Operations: Use async patterns for I/O operations</li> <li>Batch Processing: Support batch operations where appropriate</li> </ol>"},{"location":"jhip/host-commands/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Input Sanitization: Always validate and sanitize inputs</li> <li>Principle of Least Privilege: Grant minimal required permissions</li> <li>Audit Logging: Log all command executions for security analysis</li> <li>Rate Limiting: Implement rate limits to prevent abuse</li> <li>Resource Limits: Set timeouts and size limits on operations</li> </ol> <p>Host commands are how JSL integrates with the real world while maintaining security, transparency, and auditability. By following these guidelines and community conventions, you can create robust, secure, and maintainable host command implementations that work well with the broader JSL ecosystem.</p>"},{"location":"jhip/protocol/","title":"JSL Host Interaction Protocol (JHIP) - Version 1.0","text":""},{"location":"jhip/protocol/#introduction","title":"Introduction","text":"<p>The JSL Host Interaction Protocol (JHIP) defines how JSL programs interact with the host environment for side effects. JSL's core philosophy is to reify effects as data - side effects are described as JSON messages rather than executed directly, allowing the host environment to control, audit, and secure all external interactions.</p>"},{"location":"jhip/protocol/#core-principles","title":"Core Principles","text":"<ul> <li>Effect Reification: Side effects are described as data, not executed directly</li> <li>Host Authority: The host controls what operations are permitted and how they execute</li> <li>JSON-Native: All messages are valid JSON for universal compatibility</li> <li>Synchronous Model: From JSL's perspective, host operations are synchronous</li> <li>Capability-Based Security: Hosts provide only the capabilities they choose to expose</li> </ul>"},{"location":"jhip/protocol/#request-structure","title":"Request Structure","text":"<p>JSL programs request host operations using the <code>host</code> special form:</p> <pre><code>[\"host\", \"command\", \"arg1\", \"arg2\", ...]\n</code></pre> <p>This creates a request message with the following structure:</p> <pre><code>{\n  \"command\": \"string\",\n  \"args\": [\"arg1\", \"arg2\", ...]\n}\n</code></pre>"},{"location":"jhip/protocol/#request-examples","title":"Request Examples","text":"<p>File Operations: <pre><code>// JSL code\n[\"host\", \"@file/read\", \"@/tmp/data.txt\"]\n\n// Request message\n{\n  \"command\": \"file/read\",\n  \"args\": [\"/tmp/data.txt\"]\n}\n</code></pre></p> <p>HTTP Requests: <pre><code>// JSL code\n[\"host\", \"@http/get\", \"@https://api.example.com/users\", {\"@Authorization\": \"@Bearer token\"}]\n\n// Request message\n{\n  \"command\": \"http/get\", \n  \"args\": [\"https://api.example.com/users\", {\"Authorization\": \"Bearer token\"}]\n}\n</code></pre></p> <p>Logging: <pre><code>// JSL code\n[\"host\", \"@log/info\", \"@User logged in\", {\"@user_id\": 123}]\n\n// Request message\n{\n  \"command\": \"log/info\",\n  \"args\": [\"User logged in\", {\"user_id\": 123}]\n}\n</code></pre></p>"},{"location":"jhip/protocol/#response-structure","title":"Response Structure","text":"<p>The host responds with either a success value or an error object.</p>"},{"location":"jhip/protocol/#success-response","title":"Success Response","text":"<p>Any valid JSON value represents success:</p> <pre><code>// File read success\n\"file content as string\"\n\n// HTTP response success\n{\n  \"status\": 200,\n  \"headers\": {\"content-type\": \"application/json\"},\n  \"body\": {\"users\": [...]}\n}\n\n// Operation with no return value\nnull\n</code></pre>"},{"location":"jhip/protocol/#error-response","title":"Error Response","text":"<p>Errors use a standard structure to distinguish them from successful <code>null</code>, <code>false</code>, or empty results:</p> <pre><code>{\n  \"$jsl_error\": {\n    \"type\": \"ErrorType\",\n    \"message\": \"Human readable description\",\n    \"details\": {}\n  }\n}\n</code></pre> <p>Error Fields: - <code>type</code>: Error category (e.g., \"FileNotFound\", \"NetworkError\", \"PermissionDenied\") - <code>message</code>: Clear description for developers - <code>details</code>: Additional structured information (optional)</p> <p>Error Examples:</p> <pre><code>// File not found\n{\n  \"$jsl_error\": {\n    \"type\": \"FileNotFound\",\n    \"message\": \"File does not exist\",\n    \"details\": {\n      \"path\": \"/tmp/missing.txt\",\n      \"operation\": \"file/read\"\n    }\n  }\n}\n\n// Permission denied\n{\n  \"$jsl_error\": {\n    \"type\": \"PermissionDenied\", \n    \"message\": \"Insufficient permissions for operation\",\n    \"details\": {\n      \"operation\": \"file/write\",\n      \"path\": \"/etc/passwd\",\n      \"required_permission\": \"root\"\n    }\n  }\n}\n\n// Network error\n{\n  \"$jsl_error\": {\n    \"type\": \"NetworkError\",\n    \"message\": \"Connection timeout\",\n    \"details\": {\n      \"url\": \"https://api.example.com\",\n      \"timeout_ms\": 5000\n    }\n  }\n}\n</code></pre>"},{"location":"jhip/protocol/#standard-commands","title":"Standard Commands","text":"<p>While hosts define their own command sets, these common patterns are recommended:</p>"},{"location":"jhip/protocol/#file-system","title":"File System","text":"<ul> <li><code>@file/read</code> - Read file content as string</li> <li><code>@file/write</code> - Write string to file  </li> <li><code>@file/exists</code> - Check if file exists</li> <li><code>@file/list</code> - List directory contents</li> <li><code>@file/delete</code> - Delete file or directory</li> </ul>"},{"location":"jhip/protocol/#http","title":"HTTP","text":"<ul> <li><code>@http/get</code> - GET request</li> <li><code>@http/post</code> - POST request</li> <li><code>@http/put</code> - PUT request</li> <li><code>@http/delete</code> - DELETE request</li> </ul>"},{"location":"jhip/protocol/#logging","title":"Logging","text":"<ul> <li><code>@log/debug</code> - Debug level log</li> <li><code>@log/info</code> - Info level log</li> <li><code>@log/warn</code> - Warning level log</li> <li><code>@log/error</code> - Error level log</li> </ul>"},{"location":"jhip/protocol/#system","title":"System","text":"<ul> <li><code>@env/get</code> - Get environment variable</li> <li><code>@time/now</code> - Current timestamp</li> <li><code>@random/uuid</code> - Generate UUID</li> <li><code>@process/exec</code> - Execute system command</li> </ul>"},{"location":"jhip/protocol/#protocol-flow","title":"Protocol Flow","text":"<ol> <li>JSL Evaluation: JSL encounters <code>[\"host\", \"command\", ...args]</code></li> <li>Argument Evaluation: All arguments are evaluated to JSON values</li> <li>Message Construction: Create request message with command and args</li> <li>Host Processing: Host validates, executes, and responds</li> <li>Response Handling: Success value returned or error thrown in JSL</li> </ol>"},{"location":"jhip/protocol/#security-model","title":"Security Model","text":"<p>JHIP implements capability-based security:</p> <ul> <li>Host Controls Access: Only commands explicitly enabled by the host are available</li> <li>Argument Validation: Host validates all arguments before execution</li> <li>Resource Limits: Host can impose limits on operations (file size, request timeouts, etc.)</li> <li>Audit Trail: All host interactions can be logged for security analysis</li> </ul>"},{"location":"jhip/protocol/#implementation-notes","title":"Implementation Notes","text":""},{"location":"jhip/protocol/#error-handling-in-jsl","title":"Error Handling in JSL","text":"<p>JSL implementations should convert JHIP error responses into JSL errors:</p> <pre><code>// If host returns error, JSL should throw\n[\"try\",\n  [\"host\", \"file/read\", \"/missing.txt\"],\n  [\"lambda\", [\"err\"], \n    [\"get\", \"err\", \"message\"]]]\n</code></pre>"},{"location":"jhip/protocol/#async-implementation","title":"Async Implementation","text":"<p>While JSL sees synchronous operations, hosts may implement async processing:</p> <ul> <li>Queue requests for batch processing</li> <li>Use connection pooling for HTTP requests</li> <li>Implement timeout and retry logic</li> <li>Cache results when appropriate</li> </ul>"},{"location":"jhip/protocol/#testing","title":"Testing","text":"<p>JHIP enables easy testing by mocking host responses:</p> <pre><code>// Mock successful file read\n{\"command\": \"file/read\", \"args\": [\"/data.txt\"]} \n\u2192 \"mocked file content\"\n\n// Mock error response  \n{\"command\": \"file/read\", \"args\": [\"/missing.txt\"]}\n\u2192 {\"$jsl_error\": {\"type\": \"FileNotFound\", \"message\": \"File not found\"}}\n</code></pre>"},{"location":"language/environments/","title":"Environments and Execution Contexts","text":""},{"location":"language/environments/#overview-the-scope-chain","title":"Overview: The Scope Chain","text":"<p>Environments are a fundamental concept in JSL, forming the backbone of its lexical scoping, security model, and module system. An environment is a data structure that maps variable names to their values. Every JSL expression is evaluated within an environment.</p> <p>When looking up a variable, the JSL runtime first checks the current environment. If the variable is not found, it proceeds to check the parent environment, and so on, creating a \"scope chain.\" This process continues until it reaches the root environment, which is the Prelude. The prelude provides all the built-in functions and is implicitly the ultimate parent of all user-defined environments.</p>"},{"location":"language/environments/#the-algebra-of-environments","title":"The Algebra of Environments","text":"<p>This algebra provides the foundation for JSL's Level 2 (Advanced) Capability-Based Security Model. While the standard security model relies on the host dispatcher to authorize requests (see Security Model), the environment algebra allows a trusted orchestrator to provision sandboxed execution contexts that cannot even attempt to call unauthorized host commands.</p> <p>By using operators like <code>remove</code> to withhold the raw <code>[\"host\", ...]</code> capability and <code>layer</code> to provide safe, pre-defined wrapper functions, a host can enforce security at the language level, before a request ever reaches the dispatcher.</p> <p>For a complete discussion of the layered security model, see the Security Model documentation.</p> <p>These operations are typically exposed to trusted code (e.g., via the Fluent Python API or a special host configuration) and are essential for creating custom execution contexts. They take one or more environment hashes as input and produce a new environment hash as output, never modifying the original environments.</p>"},{"location":"language/environments/#layer-union-additive-merge","title":"<code>layer</code> (Union / Additive Merge)","text":"<p>The <code>layer</code> operation creates a new environment by combining the bindings from one or more existing environments on top of a shared parent.</p> <ul> <li>Syntax: <code>[\"layer\", parent_env_hash, env_hash_1, env_hash_2, ...]</code></li> <li>Use Case: Module composition. You can load multiple modules (each represented by an environment) and <code>layer</code> them together to create a single, unified API scope for your application.</li> <li>Conflict Resolution: If multiple source environments define a binding with the same name, the one from the last environment in the argument list (\"last-write-wins\") is used.</li> </ul>"},{"location":"language/environments/#remove-subtraction-capability-reduction","title":"<code>remove</code> (Subtraction / Capability Reduction)","text":"<p>The <code>remove</code> operation creates a new, less-privileged environment by removing specified bindings.</p> <ul> <li>Syntax: <code>[\"remove\", env_hash, \"key_to_remove_1\", \"key_to_remove_2\", ...]</code></li> <li>Use Case: Sandboxing and security. If you have a powerful <code>file_system</code> module, you can use <code>remove</code> to create a \"read-only\" version of it for untrusted code by removing the <code>write</code> and <code>delete</code> bindings.</li> </ul>"},{"location":"language/environments/#intersect-intersection-of-capabilities","title":"<code>intersect</code> (Intersection of Capabilities)","text":"<p>The <code>intersect</code> operation creates a new environment containing only the bindings whose names exist in all of the provided environments.</p> <ul> <li>Syntax: <code>[\"intersect\", env_hash_1, env_hash_2, ...]</code></li> <li>Use Case: Enforcing an API interface. You can <code>intersect</code> two versions of a module to create an environment that is guaranteed to only contain the functions common to both, making your code more robust against API changes.</li> </ul>"},{"location":"language/environments/#difference-exclusive-capabilities","title":"<code>difference</code> (Exclusive Capabilities)","text":"<p>The <code>difference</code> operation creates a new environment containing only the bindings from a base environment whose names do not exist in another.</p> <ul> <li>Syntax: <code>[\"difference\", base_env_hash, env_to_subtract_hash]</code></li> <li>Use Case: Introspection and tooling. This can be used to identify new or deprecated features between two versions of a module.</li> </ul>"},{"location":"language/environments/#environments-and-serialization","title":"Environments and Serialization","text":"<p>While the concept of environments is part of the language specification, their representation for transport and storage is an architectural detail. For more information on how environments are serialized using content-addressable hashing, see Code and Data Serialization.</p>"},{"location":"language/objects/","title":"JSON Objects as First-Class Citizens","text":""},{"location":"language/objects/#overview","title":"Overview","text":"<p>JSL treats JSON objects as first-class data structures with native support for dynamic construction. Unlike arrays (which are interpreted as S-expressions), JSON objects in JSL are always treated as data structures, making them perfect for constructing pure JSON output without ambiguity.</p>"},{"location":"language/objects/#why-objects-are-special","title":"Why Objects Are Special","text":"<p>In JSL, there's an important distinction between arrays and objects:</p> <ul> <li>Arrays: <code>[\"+\", 1, 2]</code> are interpreted as function calls (S-expressions)</li> <li>Objects: <code>{\"name\": \"Alice\"}</code> are always treated as data structures</li> </ul> <p>This means objects provide a \"safe zone\" for pure data construction where you don't have to worry about the first element being interpreted as an operator.</p>"},{"location":"language/objects/#object-construction-syntax","title":"Object Construction Syntax","text":"<p>JSL objects use normal JSL evaluation rules for both keys and values:</p> <ul> <li>Keys must evaluate to strings</li> <li>Values can be any JSL expression</li> <li>Use <code>@</code> prefix for literal strings in both keys and values</li> </ul>"},{"location":"language/objects/#basic-examples","title":"Basic Examples","text":"<p>Literal Object: <pre><code>{\"@name\": \"@Alice\", \"@age\": 25}\n</code></pre> Result: <code>{\"name\": \"Alice\", \"age\": 25}</code></p> <p>Dynamic Values: <pre><code>[\"do\",\n  [\"def\", \"user_name\", \"@Bob\"],\n  [\"def\", \"user_age\", 30],\n  {\"@name\": \"user_name\", \"@age\": \"user_age\"}\n]\n</code></pre> Result: <code>{\"name\": \"Bob\", \"age\": 30}</code></p> <p>Dynamic Keys: <pre><code>[\"do\",\n  [\"def\", \"field_name\", \"@username\"],\n  {\"field_name\": \"@Alice\"}\n]\n</code></pre> Result: <code>{\"username\": \"Alice\"}</code></p>"},{"location":"language/objects/#string-construction-in-objects","title":"String Construction in Objects","text":"<p>For dynamic string construction, use JSL's string functions:</p> <p><pre><code>[\"do\",\n  [\"def\", \"name\", \"@Alice\"],\n  [\"def\", \"age\", 25],\n  {\n    \"@greeting\": [\"str-concat\", \"@Hello \", \"name\"],\n    \"@info\": [\"str-concat\", \"@Age: \", \"age\"],\n    \"@status\": [\"if\", [\"&gt;\", \"age\", 18], \"@adult\", \"@minor\"]\n  }\n]\n</code></pre> Result: <pre><code>{\n  \"greeting\": \"Hello Alice\",\n  \"info\": \"Age: 25\", \n  \"status\": \"adult\"\n}\n</code></pre></p>"},{"location":"language/objects/#nested-objects-and-complex-structures","title":"Nested Objects and Complex Structures","text":"<p>Objects can contain any JSL expressions, including nested objects and arrays:</p> <pre><code>[\"do\",\n  [\"def\", \"users\", [\"@\", [\"Alice\", \"Bob\", \"Carol\"]]],\n  {\n    \"@project\": \"@My Project\",\n    \"@team\": {\n      \"@lead\": [\"first\", \"users\"],\n      \"@members\": \"users\",\n      \"@size\": [\"length\", \"users\"]\n    },\n    \"@tags\": [\"@\", [\"web\", \"javascript\", \"api\"]]\n  }\n]\n</code></pre>"},{"location":"language/objects/#advantages-of-object-first-design","title":"Advantages of Object-First Design","text":"<ol> <li>No Operator Ambiguity: Objects are always data, never function calls</li> <li>Pure JSON Output: Objects naturally serialize to clean JSON</li> <li>Composable: Works seamlessly with JSL functions and variables</li> <li>Consistent Syntax: Uses the same <code>@</code> rules as the rest of JSL</li> <li>Type Safety: Keys are validated to be strings at runtime</li> </ol>"},{"location":"language/objects/#working-with-object-functions","title":"Working with Object Functions","text":"<p>JSL provides built-in functions for object manipulation:</p> <pre><code>[\"do\",\n  [\"def\", \"user\", {\"@name\": \"@Alice\", \"@role\": \"@admin\"}],\n\n  [\"get\", \"user\", \"@name\"],        // \u2192 \"Alice\"\n  [\"has\", \"user\", \"@email\"],       // \u2192 false\n  [\"keys\", \"user\"],                // \u2192 [\"name\", \"role\"]\n\n  [\"set\", \"user\", \"@email\", \"@alice@example.com\"]  // Add new field\n]\n</code></pre>"},{"location":"language/overview/","title":"JSL Language Overview","text":""},{"location":"language/overview/#what-is-jsl","title":"What is JSL?","text":"<p>JSL (JSON Serializable Language) is a powerful, functional programming language where every program is valid JSON. This unique design makes it perfect for network transmission, distributed computing, and safe, sandboxed execution.</p> <p>JSL is built on three core principles: 1.  Homoiconic: Code and data share the same structure (JSON). This means you can build and manipulate code as easily as you handle data. 2.  Functional: With features like immutability, first-class functions, and a rich library of higher-order functions, JSL encourages a clean, declarative style. 3.  Serializable: Every JSL value, including functions with their environments, can be perfectly serialized to a string, sent across a network, and safely executed on a remote machine.</p>"},{"location":"language/overview/#a-taste-of-jsl","title":"A Taste of JSL","text":"<p>Because JSL is JSON, operations use a simple prefix notation inside an array. This expression adds three numbers: <pre><code>[\"+\", 1, 2, 3]\n</code></pre> The evaluator understands that the first element, <code>\"+\"</code>, is a function to be applied to the rest of the elements, resulting in <code>6</code>.</p>"},{"location":"language/overview/#the-two-modes-of-jsl","title":"The Two Modes of JSL","text":"<p>JSL has a single, consistent evaluation model where:</p>"},{"location":"language/overview/#core-evaluation-rules","title":"Core Evaluation Rules","text":"<ol> <li>Strings without <code>@</code>: Variable lookups (e.g., <code>\"x\"</code> looks up the value of x)</li> <li>Strings with <code>@</code>: Literal strings (e.g., <code>\"@hello\"</code> is the string \"hello\")</li> <li>Arrays: Function calls in prefix notation (e.g., <code>[\"+\", 1, 2]</code>)</li> <li>Objects: Data structures with evaluated keys and values</li> <li>Other values: Self-evaluating (numbers, booleans, null)</li> </ol>"},{"location":"language/overview/#json-object-construction","title":"JSON Object Construction","text":"<p>JSL treats JSON objects as first-class data structures. Unlike arrays (which are interpreted as S-expressions), objects are always data structures, never function calls. This makes them perfect for constructing pure JSON output:</p> <pre><code>[\"do\",\n  [\"def\", \"user\", \"@Alice\"],\n  [\"def\", \"role\", \"@admin\"],\n  {\"@name\": \"user\", \"@role\": \"role\"}\n]\n// Result: {\"name\": \"Alice\", \"role\": \"admin\"}\n</code></pre> <p>For a complete guide, see JSON Objects as First-Class Citizens.</p>"},{"location":"language/overview/#key-language-features","title":"Key Language Features","text":"<ul> <li>Special Forms: A small set of core keywords like <code>if</code>, <code>def</code>, and <code>lambda</code> provide the foundation for control flow and variable bindings. See the Special Forms Guide.</li> <li>Rich Prelude: A comprehensive standard library of functions for math, logic, and data manipulation is available everywhere. See the Prelude Reference.</li> <li>Lexical Scoping: JSL uses lexical scoping, meaning functions (closures) capture the environment where they are defined, not where they are called. This provides a robust and predictable module system.</li> <li>Host Interaction: JSL interacts with the host system through a single, explicit special form, <code>[\"host\", ...]</code>, making all side effects transparent and auditable.</li> </ul>"},{"location":"language/overview/#a-complete-example","title":"A Complete Example","text":"<p>This example defines and calls a recursive factorial function, showcasing variable and function definition (<code>def</code>, <code>lambda</code>), conditional logic (<code>if</code>), and a sequence of operations (<code>do</code>).</p> <p><pre><code>[\"do\",\n  [\"def\", \"factorial\",\n    [\"lambda\", [\"n\"],\n      [\"if\", [\"&lt;=\", \"n\", 1],\n        1,\n        [\"*\", \"n\", [\"factorial\", [\"-\", \"n\", 1]]]\n      ]\n    ]\n  ],\n  [\"factorial\", 5]\n]\n</code></pre> The result of evaluating this expression is <code>120</code>.</p>"},{"location":"language/overview/#where-to-go-next","title":"Where to Go Next","text":"<ul> <li>JSL Syntax and Semantics: The definitive guide to writing and understanding core JSL.</li> <li>JSON Objects: Learn how to generate dynamic JSON objects.</li> <li>Special Forms: A detailed reference for all core language constructs.</li> <li>Prelude Functions: A complete catalog of all built-in functions</li> </ul>"},{"location":"language/prelude/","title":"Prelude Functions","text":""},{"location":"language/prelude/#overview","title":"Overview","text":"<p>The JSL prelude provides the computational foundation for all JSL programs. These built-in functions are available in every JSL environment.</p> <p>For a guide to creating and managing execution contexts, see the Environments documentation.</p>"},{"location":"language/prelude/#special-forms-core-syntax","title":"Special Forms (Core Syntax)","text":"<p>While the prelude contains a library of standard functions, the core language is defined by a small set of special forms. These are syntactic constructs that do not follow the standard evaluation rule (i.e., they don't necessarily evaluate all of their arguments).</p> <p>The core special forms include <code>if</code>, <code>def</code>, <code>lambda</code>, <code>do</code>, <code>let</code>, and <code>try</code>. For a complete reference, please see the dedicated Special Forms documentation.</p>"},{"location":"language/prelude/#design-principles","title":"Design Principles","text":"<ul> <li>Immutable Operations: Functions return new values rather than modifying inputs</li> <li>N-arity Support: Mathematical and logical operations accept variable numbers of arguments</li> <li>Type Safety: Comprehensive type predicates and safe conversions</li> <li>Functional Composition: Higher-order functions that work seamlessly with JSL closures</li> <li>JSON Compatibility: All operations respect JSON's type system</li> </ul>"},{"location":"language/prelude/#data-constructors","title":"Data Constructors","text":""},{"location":"language/prelude/#list","title":"<code>list</code>","text":"<p><pre><code>[\"list\", 1, 2, 3]  // \u2192 [1, 2, 3]\n[\"list\"]           // \u2192 []\n</code></pre> Creates a list from the provided arguments.</p>"},{"location":"language/prelude/#list-operations","title":"List Operations","text":"<p>JSL provides comprehensive list manipulation functions following functional programming principles.</p>"},{"location":"language/prelude/#append","title":"<code>append</code>","text":"<p><pre><code>[\"append\", [1, 2, 3], 4]  // \u2192 [1, 2, 3, 4]\n[\"append\", [], 1]         // \u2192 [1]\n</code></pre> Returns a new list with the item appended to the end.</p>"},{"location":"language/prelude/#prepend","title":"<code>prepend</code>","text":"<p><pre><code>[\"prepend\", 0, [1, 2, 3]]  // \u2192 [0, 1, 2, 3]\n[\"prepend\", 1, []]         // \u2192 [1]\n</code></pre> Returns a new list with the item prepended to the beginning.</p>"},{"location":"language/prelude/#concat","title":"<code>concat</code>","text":"<p><pre><code>[\"concat\", [1, 2], [3, 4], [5]]  // \u2192 [1, 2, 3, 4, 5]\n[\"concat\", [1], [2]]             // \u2192 [1, 2]\n[\"concat\"]                       // \u2192 []\n</code></pre> Concatenates multiple lists into a single list.</p>"},{"location":"language/prelude/#first","title":"<code>first</code>","text":"<p><pre><code>[\"first\", [1, 2, 3]]  // \u2192 1\n[\"first\", []]         // \u2192 null\n</code></pre> Returns the first element of a list, or null if empty.</p>"},{"location":"language/prelude/#rest","title":"<code>rest</code>","text":"<p><pre><code>[\"rest\", [1, 2, 3]]  // \u2192 [2, 3]\n[\"rest\", [1]]        // \u2192 []\n[\"rest\", []]         // \u2192 []\n</code></pre> Returns all elements except the first, or empty list if insufficient elements.</p>"},{"location":"language/prelude/#nth","title":"<code>nth</code>","text":"<p><pre><code>[\"nth\", [10, 20, 30], 1]  // \u2192 20\n[\"nth\", [10, 20], 5]      // \u2192 null\n</code></pre> Returns the element at the specified index (0-based), or null if out of bounds.</p>"},{"location":"language/prelude/#length","title":"<code>length</code>","text":"<p><pre><code>[\"length\", [1, 2, 3]]  // \u2192 3\n[\"length\", []]         // \u2192 0\n[\"length\", \"hello\"]    // \u2192 5\n</code></pre> Returns the length of a list or string.</p>"},{"location":"language/prelude/#empty","title":"<code>empty?</code>","text":"<p><pre><code>[\"empty?\", []]      // \u2192 true\n[\"empty?\", [1]]     // \u2192 false\n[\"empty?\", \"\"]      // \u2192 true\n[\"empty?\", \"hi\"]    // \u2192 false\n</code></pre> Returns true if the collection is empty.</p>"},{"location":"language/prelude/#slice","title":"<code>slice</code>","text":"<p><pre><code>[\"slice\", [1, 2, 3, 4, 5], 1, 4]  // \u2192 [2, 3, 4]\n[\"slice\", [1, 2, 3], 1]           // \u2192 [2, 3]\n[\"slice\", \"hello\", 1, 4]          // \u2192 \"ell\"\n</code></pre> Returns a slice of the list or string from start to end (exclusive).</p>"},{"location":"language/prelude/#reverse","title":"<code>reverse</code>","text":"<p><pre><code>[\"reverse\", [1, 2, 3]]  // \u2192 [3, 2, 1]\n[\"reverse\", \"hello\"]    // \u2192 \"olleh\"\n</code></pre> Returns a reversed copy of the list or string.</p>"},{"location":"language/prelude/#contains","title":"<code>contains?</code>","text":"<p><pre><code>[\"contains?\", [1, 2, 3], 2]      // \u2192 true\n[\"contains?\", [1, 2, 3], 4]      // \u2192 false\n[\"contains?\", \"hello\", \"ell\"]    // \u2192 true\n</code></pre> Returns true if the collection contains the specified item.</p>"},{"location":"language/prelude/#index","title":"<code>index</code>","text":"<p><pre><code>[\"index\", [10, 20, 30], 20]  // \u2192 1\n[\"index\", [10, 20, 30], 40]  // \u2192 -1\n</code></pre> Returns the index of the first occurrence of item, or -1 if not found.</p>"},{"location":"language/prelude/#dictionary-operations","title":"Dictionary Operations","text":"<p>Immutable dictionary operations supporting functional programming patterns.</p>"},{"location":"language/prelude/#get","title":"<code>get</code>","text":"<p><pre><code>[\"get\", {\"name\": \"Alice\", \"age\": 30}, \"name\"]           // \u2192 \"Alice\"\n[\"get\", {\"name\": \"Alice\"}, \"age\", \"unknown\"]            // \u2192 \"unknown\"\n</code></pre> Gets a value from a dictionary with optional default.</p>"},{"location":"language/prelude/#set","title":"<code>set</code>","text":"<p><pre><code>[\"set\", {\"name\": \"Alice\"}, \"age\", 30]  // \u2192 {\"name\": \"Alice\", \"age\": 30}\n[\"set\", {}, \"key\", \"value\"]            // \u2192 {\"key\": \"value\"}\n</code></pre> Returns a new dictionary with the key-value pair set.</p>"},{"location":"language/prelude/#keys","title":"<code>keys</code>","text":"<p><pre><code>[\"keys\", {\"name\": \"Alice\", \"age\": 30}]  // \u2192 [\"name\", \"age\"]\n[\"keys\", {}]                            // \u2192 []\n</code></pre> Returns a list of all keys in the dictionary.</p>"},{"location":"language/prelude/#values","title":"<code>values</code>","text":"<p><pre><code>[\"values\", {\"name\": \"Alice\", \"age\": 30}]  // \u2192 [\"Alice\", 30]\n[\"values\", {}]                            // \u2192 []\n</code></pre> Returns a list of all values in the dictionary.</p>"},{"location":"language/prelude/#merge","title":"<code>merge</code>","text":"<p><pre><code>[\"merge\", {\"a\": 1}, {\"b\": 2}, {\"c\": 3}]  // \u2192 {\"a\": 1, \"b\": 2, \"c\": 3}\n[\"merge\", {\"a\": 1}, {\"a\": 2}]            // \u2192 {\"a\": 2}\n</code></pre> Merges multiple dictionaries, with later values overriding earlier ones.</p>"},{"location":"language/prelude/#has-key","title":"<code>has-key?</code>","text":"<p><pre><code>[\"has-key?\", {\"name\": \"Alice\"}, \"name\"]  // \u2192 true\n[\"has-key?\", {\"name\": \"Alice\"}, \"age\"]   // \u2192 false\n</code></pre> Returns true if the dictionary contains the specified key.</p>"},{"location":"language/prelude/#arithmetic-operations","title":"Arithmetic Operations","text":"<p>Mathematical operations with n-arity support for natural expression.</p>"},{"location":"language/prelude/#addition","title":"<code>+</code> (Addition)","text":"<p><pre><code>[\"+\", 1, 2, 3]    // \u2192 6\n[\"+\", 5]          // \u2192 5\n[\"+\"]             // \u2192 0\n</code></pre> Adds all arguments. With no arguments, returns 0.</p>"},{"location":"language/prelude/#-subtraction","title":"<code>-</code> (Subtraction)","text":"<p><pre><code>[\"-\", 10, 3, 2]   // \u2192 5 (10 - 3 - 2)\n[\"-\", 5]          // \u2192 -5 (negation)\n[\"-\"]             // \u2192 0\n</code></pre> Subtracts subsequent arguments from the first. With one argument, returns negation.</p>"},{"location":"language/prelude/#multiplication","title":"<code>*</code> (Multiplication)","text":"<p><pre><code>[\"*\", 2, 3, 4]    // \u2192 24\n[\"*\", 5]          // \u2192 5\n[\"*\"]             // \u2192 1\n</code></pre> Multiplies all arguments. With no arguments, returns 1.</p>"},{"location":"language/prelude/#division","title":"<code>/</code> (Division)","text":"<p><pre><code>[\"/\", 12, 3, 2]   // \u2192 2.0 (12 / 3 / 2)\n[\"/\", 5]          // \u2192 0.2 (1 / 5)\n</code></pre> Divides the first argument by all subsequent arguments. With one argument, returns reciprocal.</p>"},{"location":"language/prelude/#mod-modulo","title":"<code>mod</code> (Modulo)","text":"<p><pre><code>[\"mod\", 10, 3]    // \u2192 1\n[\"mod\", 7, 0]     // \u2192 0 (safe: returns 0 for division by zero)\n</code></pre> Returns the remainder of division.</p>"},{"location":"language/prelude/#pow-exponentiation","title":"<code>pow</code> (Exponentiation)","text":"<p><pre><code>[\"pow\", 2, 3]     // \u2192 8\n[\"pow\", 9, 0.5]   // \u2192 3.0\n</code></pre> Raises the first argument to the power of the second.</p>"},{"location":"language/prelude/#comparison-operations","title":"Comparison Operations","text":"<p>Chained comparisons supporting mathematical notation.</p>"},{"location":"language/prelude/#equality","title":"<code>=</code> (Equality)","text":"<p><pre><code>[\"=\", 1, 1, 1]        // \u2192 true\n[\"=\", 1, 2]           // \u2192 false\n[\"=\", \"a\", \"a\", \"a\"]  // \u2192 true\n</code></pre> Returns true if all arguments are equal.</p>"},{"location":"language/prelude/#less-than","title":"<code>&lt;</code> (Less Than)","text":"<p><pre><code>[\"&lt;\", 1, 2, 3]    // \u2192 true (1 &lt; 2 &lt; 3)\n[\"&lt;\", 1, 3, 2]    // \u2192 false\n</code></pre> Returns true if arguments form an ascending sequence.</p>"},{"location":"language/prelude/#greater-than","title":"<code>&gt;</code> (Greater Than)","text":"<p><pre><code>[\"&gt;\", 3, 2, 1]    // \u2192 true (3 &gt; 2 &gt; 1)\n[\"&gt;\", 3, 1, 2]    // \u2192 false\n</code></pre> Returns true if arguments form a descending sequence.</p>"},{"location":"language/prelude/#less-than-or-equal","title":"<code>&lt;=</code> (Less Than or Equal)","text":"<p><pre><code>[\"&lt;=\", 1, 2, 2, 3]  // \u2192 true\n[\"&lt;=\", 1, 3, 2]     // \u2192 false\n</code></pre> Returns true if arguments form a non-decreasing sequence.</p>"},{"location":"language/prelude/#greater-than-or-equal","title":"<code>&gt;=</code> (Greater Than or Equal)","text":"<p><pre><code>[\"&gt;=\", 3, 2, 2, 1]  // \u2192 true\n[\"&gt;=\", 3, 1, 2]     // \u2192 false\n</code></pre> Returns true if arguments form a non-increasing sequence.</p>"},{"location":"language/prelude/#logical-operations","title":"Logical Operations","text":"<p>Logical operations with n-arity support and short-circuiting.</p>"},{"location":"language/prelude/#and","title":"<code>and</code>","text":"<p><pre><code>[\"and\", true, true, true]   // \u2192 true\n[\"and\", true, false, true]  // \u2192 false\n[\"and\"]                     // \u2192 true\n</code></pre> Returns true if all arguments are truthy.</p>"},{"location":"language/prelude/#or","title":"<code>or</code>","text":"<p><pre><code>[\"or\", false, false, true]  // \u2192 true\n[\"or\", false, false]        // \u2192 false\n[\"or\"]                      // \u2192 false\n</code></pre> Returns true if any argument is truthy.</p>"},{"location":"language/prelude/#not","title":"<code>not</code>","text":"<p><pre><code>[\"not\", true]    // \u2192 false\n[\"not\", false]   // \u2192 true\n[\"not\", 0]       // \u2192 true\n[\"not\", \"\"]      // \u2192 true\n</code></pre> Returns the logical negation of the argument.</p>"},{"location":"language/prelude/#type-predicates","title":"Type Predicates","text":"<p>Essential for wire format validation and dynamic type checking.</p>"},{"location":"language/prelude/#null","title":"<code>null?</code>","text":"<p><pre><code>[\"null?\", null]    // \u2192 true\n[\"null?\", 0]       // \u2192 false\n[\"null?\", false]   // \u2192 false\n</code></pre> Returns true if the value is null.</p>"},{"location":"language/prelude/#bool","title":"<code>bool?</code>","text":"<p><pre><code>[\"bool?\", true]    // \u2192 true\n[\"bool?\", false]   // \u2192 true\n[\"bool?\", 0]       // \u2192 false\n</code></pre> Returns true if the value is a boolean.</p>"},{"location":"language/prelude/#number","title":"<code>number?</code>","text":"<p><pre><code>[\"number?\", 42]      // \u2192 true\n[\"number?\", 3.14]    // \u2192 true\n[\"number?\", \"42\"]    // \u2192 false\n</code></pre> Returns true if the value is a number (integer or float).</p>"},{"location":"language/prelude/#string","title":"<code>string?</code>","text":"<p><pre><code>[\"string?\", \"hello\"]  // \u2192 true\n[\"string?\", 42]       // \u2192 false\n</code></pre> Returns true if the value is a string.</p>"},{"location":"language/prelude/#list_1","title":"<code>list?</code>","text":"<p><pre><code>[\"list?\", [1, 2, 3]]  // \u2192 true\n[\"list?\", \"hello\"]    // \u2192 false\n</code></pre> Returns true if the value is a list.</p>"},{"location":"language/prelude/#dict","title":"<code>dict?</code>","text":"<p><pre><code>[\"dict?\", {\"a\": 1}]   // \u2192 true\n[\"dict?\", [1, 2]]     // \u2192 false\n</code></pre> Returns true if the value is a dictionary.</p>"},{"location":"language/prelude/#callable","title":"<code>callable?</code>","text":"<p><pre><code>[\"callable?\", [\"lambda\", [\"x\"], \"x\"]]  // \u2192 true (after evaluation)\n[\"callable?\", 42]                      // \u2192 false\n</code></pre> Returns true if the value is callable (function or closure).</p>"},{"location":"language/prelude/#string-operations","title":"String Operations","text":"<p>String manipulation functions for text processing.</p>"},{"location":"language/prelude/#str-concat","title":"<code>str-concat</code>","text":"<p><pre><code>[\"str-concat\", \"Hello\", \" \", \"World\"]  // \u2192 \"Hello World\"\n[\"str-concat\", \"Number: \", 42]         // \u2192 \"Number: 42\"\n</code></pre> Concatenates all arguments after converting them to strings.</p>"},{"location":"language/prelude/#str-split","title":"<code>str-split</code>","text":"<p><pre><code>[\"str-split\", \"a,b,c\", \",\"]     // \u2192 [\"a\", \"b\", \"c\"]\n[\"str-split\", \"hello world\"]    // \u2192 [\"hello\", \"world\"] (default: space)\n</code></pre> Splits a string by the specified separator.</p>"},{"location":"language/prelude/#str-join","title":"<code>str-join</code>","text":"<p><pre><code>[\"str-join\", [\"a\", \"b\", \"c\"], \",\"]    // \u2192 \"a,b,c\"\n[\"str-join\", [1, 2, 3], \"-\"]          // \u2192 \"1-2-3\"\n[\"str-join\", [\"a\", \"b\"]]              // \u2192 \"ab\" (default: empty string)\n</code></pre> Joins a list of values into a string with the specified separator.</p>"},{"location":"language/prelude/#str-length","title":"<code>str-length</code>","text":"<p><pre><code>[\"str-length\", \"hello\"]    // \u2192 5\n[\"str-length\", \"\"]         // \u2192 0\n</code></pre> Returns the length of a string.</p>"},{"location":"language/prelude/#str-upper","title":"<code>str-upper</code>","text":"<p><pre><code>[\"str-upper\", \"hello\"]     // \u2192 \"HELLO\"\n</code></pre> Converts a string to uppercase.</p>"},{"location":"language/prelude/#str-lower","title":"<code>str-lower</code>","text":"<p><pre><code>[\"str-lower\", \"HELLO\"]     // \u2192 \"hello\"\n</code></pre> Converts a string to lowercase.</p>"},{"location":"language/prelude/#higher-order-functions","title":"Higher-Order Functions","text":"<p>The cornerstone of functional programming, enabling composition and abstraction.</p>"},{"location":"language/prelude/#map","title":"<code>map</code>","text":"<p><pre><code>[\"map\", [\"lambda\", [\"x\"], [\"*\", \"x\", 2]], [1, 2, 3]]  // \u2192 [2, 4, 6]\n[\"map\", \"+\", [[1, 2], [3, 4]]]                        // \u2192 [3, 7]\n</code></pre> Applies a function to each element of a list, returning a new list of results.</p>"},{"location":"language/prelude/#filter","title":"<code>filter</code>","text":"<p><pre><code>[\"filter\", [\"lambda\", [\"x\"], [\"&gt;\", \"x\", 5]], [1, 6, 3, 8, 2]]  // \u2192 [6, 8]\n[\"filter\", \"even?\", [1, 2, 3, 4, 5, 6]]                        // \u2192 [2, 4, 6]\n</code></pre> Returns a new list containing only elements for which the predicate returns true.</p>"},{"location":"language/prelude/#reduce","title":"<code>reduce</code>","text":"<p><pre><code>[\"reduce\", \"+\", [1, 2, 3, 4]]           // \u2192 10\n[\"reduce\", \"*\", [1, 2, 3, 4], 1]        // \u2192 24 (with initial value)\n[\"reduce\", \"max\", [3, 1, 4, 1, 5]]      // \u2192 5\n</code></pre> Reduces a list to a single value by repeatedly applying a binary function.</p>"},{"location":"language/prelude/#apply","title":"<code>apply</code>","text":"<p><pre><code>[\"apply\", \"+\", [1, 2, 3]]                    // \u2192 6\n[\"apply\", [\"lambda\", [\"x\", \"y\"], [\"*\", \"x\", \"y\"]], [3, 4]]  // \u2192 12\n</code></pre> Applies a function to a list of arguments.</p>"},{"location":"language/prelude/#mathematical-functions","title":"Mathematical Functions","text":"<p>Extended mathematical operations for scientific computing.</p>"},{"location":"language/prelude/#min-max","title":"<code>min</code> / <code>max</code>","text":"<p><pre><code>[\"min\", 3, 1, 4, 1, 5]  // \u2192 1\n[\"max\", 3, 1, 4, 1, 5]  // \u2192 5\n</code></pre> Returns the minimum or maximum of the arguments.</p>"},{"location":"language/prelude/#abs","title":"<code>abs</code>","text":"<p><pre><code>[\"abs\", -5]    // \u2192 5\n[\"abs\", 3.14]  // \u2192 3.14\n</code></pre> Returns the absolute value.</p>"},{"location":"language/prelude/#round","title":"<code>round</code>","text":"<p><pre><code>[\"round\", 3.7]     // \u2192 4\n[\"round\", 3.14159, 2]  // \u2192 3.14\n</code></pre> Rounds to the nearest integer or specified decimal places.</p>"},{"location":"language/prelude/#trigonometric-functions","title":"Trigonometric Functions","text":"<p><pre><code>[\"sin\", 1.5708]    // \u2192 ~1.0 (\u03c0/2)\n[\"cos\", 0]         // \u2192 1.0\n[\"tan\", 0.7854]    // \u2192 ~1.0 (\u03c0/4)\n</code></pre> Standard trigonometric functions (arguments in radians).</p>"},{"location":"language/prelude/#sqrt","title":"<code>sqrt</code>","text":"<p><pre><code>[\"sqrt\", 16]   // \u2192 4.0\n[\"sqrt\", 2]    // \u2192 ~1.414\n</code></pre> Returns the square root.</p>"},{"location":"language/prelude/#log-exp","title":"<code>log</code> / <code>exp</code>","text":"<p><pre><code>[\"log\", 2.718]   // \u2192 ~1.0 (natural log)\n[\"exp\", 1]       // \u2192 ~2.718 (e^1)\n</code></pre> Natural logarithm and exponential functions.</p>"},{"location":"language/prelude/#type-conversion","title":"Type Conversion","text":"<p>Safe type conversion functions with reasonable defaults.</p>"},{"location":"language/prelude/#to-string","title":"<code>to-string</code>","text":"<p><pre><code>[\"to-string\", 42]     // \u2192 \"42\"\n[\"to-string\", true]   // \u2192 \"True\"\n[\"to-string\", [1,2]]  // \u2192 \"[1, 2]\"\n</code></pre> Converts any value to its string representation.</p>"},{"location":"language/prelude/#to-number","title":"<code>to-number</code>","text":"<p><pre><code>[\"to-number\", \"42\"]      // \u2192 42.0\n[\"to-number\", \"3.14\"]    // \u2192 3.14\n[\"to-number\", \"hello\"]   // \u2192 0 (safe default)\n</code></pre> Attempts to convert a value to a number, returning 0 for invalid inputs.</p>"},{"location":"language/prelude/#type-of","title":"<code>type-of</code>","text":"<p><pre><code>[\"type-of\", 42]        // \u2192 \"int\"\n[\"type-of\", \"hello\"]   // \u2192 \"str\"\n[\"type-of\", [1, 2]]    // \u2192 \"list\"\n</code></pre> Returns the type name of a value.</p>"},{"location":"language/prelude/#io-operations","title":"I/O Operations","text":"<p>Basic I/O functions (can be customized in sandboxed environments).</p>"},{"location":"language/prelude/#print","title":"<code>print</code>","text":"<p><pre><code>[\"print\", \"Hello, World!\"]  // Outputs: Hello, World!\n[\"print\", 42, \"is the answer\"]  // Outputs: 42 is the answer\n</code></pre> Prints values to standard output.</p>"},{"location":"language/prelude/#error","title":"<code>error</code>","text":"<p><pre><code>[\"error\", \"Something went wrong!\"]  // Raises RuntimeError\n</code></pre> Raises a runtime error with the specified message.</p>"},{"location":"language/prelude/#integration-with-jsl-closures","title":"Integration with JSL Closures","text":"<p>All higher-order functions in the prelude work seamlessly with JSL closures through the <code>eval_closure_or_builtin</code> integration layer. This ensures that:</p> <ol> <li>Lexical scoping is preserved - Closures maintain access to their captured environments</li> <li>Built-in access is guaranteed - All closures can access prelude functions</li> <li>Performance is optimized - Environment chains are linked efficiently at call time</li> <li>Serialization is safe - Only user bindings are serialized with closures</li> </ol> <p>This design enables powerful functional programming patterns while maintaining JSL's core promise of safe, network-transmissible code.</p>"},{"location":"language/semantics/","title":"Syntax and Semantics","text":""},{"location":"language/semantics/#overview","title":"Overview","text":"<p>JSL uses JSON as its native syntax, making it both human-readable and machine-parseable. Every JSL program is a valid JSON value, and this document describes how those values are interpreted and evaluated.</p>"},{"location":"language/semantics/#core-concepts","title":"Core Concepts","text":"<ol> <li>Homoiconicity: Code and data share the same fundamental representation (JSON).</li> <li>Evaluation Environments: Expressions are evaluated within a specific environment that holds variable bindings and links to a parent.</li> <li>Lisp-like Evaluation: The evaluation logic follows a pattern similar to Lisp, with prefix notation for function calls.</li> </ol>"},{"location":"language/semantics/#syntax-and-evaluation-rules","title":"Syntax and Evaluation Rules","text":""},{"location":"language/semantics/#1-literals-self-evaluating-values","title":"1. Literals (Self-Evaluating Values)","text":"<p>Most JSON primitives are literals; they evaluate to themselves.</p> <ul> <li>Numbers: <code>42</code> \u2192 <code>42</code></li> <li>Booleans: <code>true</code> \u2192 <code>true</code></li> <li>Null: <code>null</code> \u2192 <code>null</code></li> <li>Objects: <code>{\"key\": \"value\"}</code> \u2192 <code>{\"key\": \"value\"}</code></li> </ul>"},{"location":"language/semantics/#2-strings-literals-vs-variables","title":"2. Strings: Literals vs. Variables","text":"<p>The interpretation of a string depends on its syntax.</p> <ul> <li>Variable Reference: A standard string is treated as a variable lookup. The evaluator will search the current environment for its value.<ul> <li><code>\"x\"</code> \u2192 The value bound to the name <code>x</code>.</li> </ul> </li> <li>String Literal: A string prefixed with <code>@</code> is treated as a literal value.<ul> <li><code>\"@hello\"</code> \u2192 The string <code>\"hello\"</code>.</li> </ul> </li> </ul>"},{"location":"language/semantics/#3-arrays-function-calls-and-special-forms","title":"3. Arrays: Function Calls and Special Forms","text":"<p>Arrays are the primary mechanism for computation in JSL. An array is evaluated by inspecting its first element.</p> <ul> <li>Empty Array: An empty array <code>[]</code> evaluates to itself, representing an empty list.</li> <li> <p>Function Call: If the first element is not a special form, the array represents a function call.</p> <ol> <li>All elements of the array (the operator and all arguments) are evaluated in order.</li> <li>The result of the first element (which must be a function) is applied to the results of the remaining elements.</li> <li><code>[\"+\", 1, \"x\"]</code> \u2192 Evaluates <code>+</code>, <code>1</code>, and <code>x</code>, then applies the addition function to the results.</li> </ol> </li> <li> <p>Special Forms: If the first element is a special form, a unique evaluation rule is applied. These forms provide the core control flow and structural logic of the language. Not all arguments are necessarily evaluated.</p> </li> </ul> Form Syntax Description <code>def</code> <code>[\"def\", \"name\", expr]</code> Binds the result of <code>expr</code> to <code>name</code> in the current environment. <code>lambda</code> <code>[\"lambda\", [params], body]</code> Creates a function (closure). Does not evaluate the body. <code>if</code> <code>[\"if\", cond, then, else]</code> Evaluates <code>cond</code>. If truthy, evaluates <code>then</code>, otherwise evaluates <code>else</code>. <code>do</code> <code>[\"do\", expr1, expr2, ...]</code> Evaluates expressions in sequence, returning the result of the last one. <code>quote</code> / <code>@</code> <code>[\"quote\", expr]</code> or <code>[\"@\", expr]</code> Returns <code>expr</code> as literal data without evaluating it. <code>try</code> <code>[\"try\", body, handler]</code> Evaluates <code>body</code>. If an error occurs, evaluates <code>handler</code> with the error. <code>host</code> <code>[\"host\", cmd, ...]</code> Sends a request to the host environment."},{"location":"language/semantics/#complete-example","title":"Complete Example","text":"<p>This expression calculates the factorial of 5, demonstrating variable definition (<code>def</code>), function creation (<code>lambda</code>), conditional logic (<code>if</code>), and recursive function calls.</p> <pre><code>[\"do\",\n  [\"def\", \"factorial\", \n    [\"lambda\", [\"n\"], \n      [\"if\", [\"&lt;=\", \"n\", 1], \n        1, \n        [\"*\", \"n\", [\"factorial\", [\"-\", \"n\", 1]]]\n      ]\n    ]\n  ],\n  [\"factorial\", 5]\n]\n</code></pre>"},{"location":"language/semantics/#jsl-for-data-construction-json-objects-as-first-class-citizens","title":"JSL for Data Construction: JSON Objects as First-Class Citizens","text":"<p>While the semantics described above define JSL as a general-purpose computation language, JSL also treats JSON objects as first-class data structures with special properties that make them ideal for data construction.</p> <p>Unlike arrays (which are interpreted as S-expressions), JSON objects are always treated as data structures: - Objects are never function calls: <code>{\"name\": \"Alice\"}</code> is always a data structure - Keys and values are evaluated: Both use normal JSL evaluation rules - Keys must be strings: Runtime type checking ensures valid JSON output - No operator ambiguity: Objects provide a \"safe zone\" for pure data construction</p> <p>This design makes JSL particularly well-suited for generating clean JSON output without worrying about the first element being interpreted as an operator.</p> <p>For a complete guide on object construction, see the JSON Objects documentation.</p>"},{"location":"language/special-forms/","title":"JSL Special Forms","text":""},{"location":"language/special-forms/#overview","title":"Overview","text":"<p>Special forms are the fundamental building blocks of JSL that have special evaluation rules. Unlike regular function calls, special forms control how their arguments are evaluated and provide the core language constructs for variable binding, control flow, and meta-programming.</p>"},{"location":"language/special-forms/#core-special-forms","title":"Core Special Forms","text":""},{"location":"language/special-forms/#variable-definition-def","title":"Variable Definition - <code>def</code>","text":"<p>Binds a value to a variable name in the current environment.</p> <pre><code>[\"def\", \"variable_name\", value_expression]\n</code></pre> <p>Evaluation Rules: 1. Evaluate <code>value_expression</code>  2. Bind the result to <code>variable_name</code> in current environment 3. Return the bound value</p> <p>Examples:</p> <pre><code>// Simple value binding\n[\"def\", \"x\", 42]\n// Result: 42, x is now bound to 42\n\n// Expression binding\n[\"def\", \"doubled\", [\"*\", \"x\", 2]]\n// Result: 84, doubled is now bound to 84\n\n// Function binding\n[\"def\", \"square\", [\"lambda\", [\"n\"], [\"*\", \"n\", \"n\"]]]\n// Result: &lt;function&gt;, square is now bound to the function\n</code></pre>"},{"location":"language/special-forms/#function-definition-lambda","title":"Function Definition - <code>lambda</code>","text":"<p>Creates anonymous functions (closures) that capture their lexical environment.</p> <pre><code>[\"lambda\", [\"param1\", \"param2\", ...], body_expression]\n</code></pre> <p>Evaluation Rules: 1. Do NOT evaluate parameters (they are binding names) 2. Do NOT evaluate body (it's evaluated when function is called) 3. Capture current environment as closure environment 4. Return function object</p> <p>Examples:</p> <pre><code>// Simple function\n[\"lambda\", [\"x\"], [\"*\", \"x\", \"x\"]]\n// Result: &lt;function: x -&gt; x * x&gt;\n\n// Multi-parameter function\n[\"lambda\", [\"a\", \"b\"], [\"+\", \"a\", \"b\"]]\n// Result: &lt;function: (a, b) -&gt; a + b&gt;\n\n// Function with closure\n[\"do\",\n  [\"def\", \"multiplier\", 10],\n  [\"lambda\", [\"x\"], [\"*\", \"x\", \"multiplier\"]]]\n// Result: &lt;function: x -&gt; x * 10&gt; (captures multiplier=10)\n\n// Higher-order function\n[\"lambda\", [\"f\", \"x\"], [\"f\", [\"f\", \"x\"]]]\n// Result: &lt;function: (f, x) -&gt; f(f(x))&gt;\n</code></pre>"},{"location":"language/special-forms/#conditional-evaluation-if","title":"Conditional Evaluation - <code>if</code>","text":"<p>Provides conditional branching with lazy evaluation of branches.</p> <pre><code>[\"if\", condition_expression, then_expression, else_expression]\n</code></pre> <p>Evaluation Rules: 1. Evaluate <code>condition_expression</code> 2. If truthy, evaluate and return <code>then_expression</code> 3. If falsy, evaluate and return <code>else_expression</code> 4. Only one branch is evaluated (lazy evaluation)</p> <p>Examples:</p> <pre><code>// Basic conditional\n[\"if\", [\"&gt;\", \"x\", 0], \"positive\", \"non-positive\"]\n\n// Nested conditionals\n[\"if\", [\"=\", \"status\", \"admin\"],\n  \"full_access\",\n  [\"if\", [\"=\", \"status\", \"user\"], \"limited_access\", \"no_access\"]]\n\n// With side effects (only one branch executes)\n[\"if\", \"debug_mode\",\n  [\"host\", \"log\", \"Debug information\"],\n  [\"host\", \"log\", \"Production mode\"]]\n</code></pre>"},{"location":"language/special-forms/#local-bindings-let","title":"Local Bindings - <code>let</code>","text":"<p>Creates temporary, local variable bindings for use within a single expression. This is a cornerstone of functional programming as it avoids mutating the parent environment.</p> <pre><code>[\"let\", [[\"var1\", val1_expr], [\"var2\", val2_expr]], body_expr]\n</code></pre> <p>Evaluation Rules: 1. Create a new, temporary environment that extends the current one. 2. Evaluate all <code>val_expr</code>s in the original environment. 3. Bind the results to the <code>var</code> names in the new temporary environment. 4. Evaluate <code>body_expr</code> in the new environment. 5. Return the result of <code>body_expr</code>. The temporary environment is then discarded.</p> <p>Example: <pre><code>// Calculate area of a circle without polluting the environment\n[\"let\", [[\"pi\", 3.14159], [\"r\", 10]],\n  [\"*\", \"pi\", [\"*\", \"r\", \"r\"]]]\n// Result: 314.159 (pi and r are not defined afterwards)\n</code></pre></p>"},{"location":"language/special-forms/#error-handling-try","title":"Error Handling - <code>try</code>","text":"<p>Provides a mechanism to catch and handle errors that occur during evaluation.</p> <pre><code>[\"try\", body_expression, handler_expression]\n</code></pre> <p>Evaluation Rules: 1. Evaluate <code>body_expression</code>. 2. If evaluation succeeds, its result is the result of the <code>try</code> expression. The <code>handler_expression</code> is not evaluated. 3. If an error occurs during the evaluation of <code>body_expression</code>, the <code>handler_expression</code> is evaluated. The handler should be a function that accepts the error object as its argument. The result of the handler becomes the result of the entire <code>try</code> expression.</p> <p>Example: <pre><code>// Safe file reading with a fallback default\n[\"try\",\n  [\"host\", \"file/read\", \"/app/config.json\"],\n  [\"lambda\", [\"err\"],\n    [\"do\",\n      [\"host\", \"log/warn\", [\"str-concat\", \"Config not found, using default: \", [\"get\", \"err\", \"message\"]]],\n      { \"default_setting\": true }\n    ]\n  ]\n]\n</code></pre></p>"},{"location":"language/special-forms/#sequential-evaluation-do","title":"Sequential Evaluation - <code>do</code>","text":"<p>Evaluates multiple expressions in sequence and returns the result of the final expression.</p> <p>While JSL encourages a functional style using <code>let</code> and function composition, <code>do</code> is provided as a pragmatic tool for imperative-style sequencing, especially when dealing with multiple side-effects.</p> <p>Design Note: Why is there no <code>for</code> or <code>while</code> loop?</p> <p>JSL intentionally omits traditional <code>for</code> or <code>while</code> loop special forms. This is a core design decision to encourage a functional approach to collection processing. Instead of imperative looping, you should use the powerful higher-order functions provided in the prelude: - <code>map</code>: To transform each element in a list. - <code>filter</code>: To select elements from a list. - <code>reduce</code>: To aggregate a list into a single value. - <code>for_each</code>: To perform a side-effect for each element in a list.</p> <p>These functions are safer, more declarative, and more composable than manual loops.</p>"},{"location":"language/special-forms/#quotation-quote-and","title":"Quotation - <code>quote</code> and <code>@</code>","text":"<p>Prevents evaluation of expressions, returning them as literal data.</p> <pre><code>[\"quote\", expression]\n[\"@\", expression]  // Shorthand syntax\n</code></pre> <p>There  is also a syntactic sugar for quoting simple expressions:</p> <p><pre><code>[\"quote\", \"hello\"]  // Result: \"hello\"\n\"@hello\"// Result: \"hello\" (same as above)\n</code></pre> It is only useful for simple values, as it does not allow for complex expressions, such as: <code>[\"@\", [\"+\", 1, 2]]</code>.</p> <p>Evaluation Rules: 1. Do NOT evaluate the argument 2. Return the argument as literal data 3. Preserves structure without interpretation</p> <p>Examples:</p> <pre><code>// Quote simple values\n[\"quote\", \"hello\"]     // Result: \"hello\"\n[\"@\", \"hello\"]         // Result: \"hello\" (same as above)\n\n// Quote expressions\n[\"quote\", [\"+\", 1, 2]]  // Result: [\"+\", 1, 2] (not 3)\n[\"@\", [\"+\", 1, 2]]      // Result: [\"+\", 1, 2]\n\n// Quote for data structure creation\n[\"@\", {\"name\": \"Alice\", \"age\": 30}]\n// Result: {\"name\": \"Alice\", \"age\": 30}\n\n// Compare quoted vs unquoted\n[\"def\", \"expr\", [\"@\", [\"+\", \"x\", \"y\"]]]  // Store expression as data\n[\"def\", \"result\", [\"+\", \"x\", \"y\"]]       // Store computed result\n</code></pre>"},{"location":"language/special-forms/#host-interaction-host","title":"Host Interaction - <code>host</code>","text":"<p>Provides controlled interaction with the host environment through JHIP.</p> <pre><code>[\"host\", command_id_expression, arg1_expression, ...]\n</code></pre> <p>Evaluation Rules: 1. Evaluate <code>command_id_expression</code> to get command identifier 2. Evaluate all argument expressions 3. Send JHIP request to host with command and arguments 4. Return host response</p> <p>Examples:</p> <pre><code>// File operations\n[\"host\", \"file/read\", \"/path/to/file.txt\"]\n[\"host\", \"file/write\", \"/path/to/output.txt\", \"content\"]\n\n// System commands\n[\"host\", \"system/exec\", \"ls\", [\"-la\"]]\n\n// Network requests\n[\"host\", \"http/get\", \"https://api.example.com/data\"]\n\n// Time operations\n[\"host\", \"time/now\"]\n[\"host\", \"time/format\", \"2023-12-01T10:30:00Z\", \"ISO\"]\n</code></pre>"},{"location":"language/special-forms/#special-form-properties","title":"Special Form Properties","text":""},{"location":"language/special-forms/#argument-evaluation-control","title":"Argument Evaluation Control","text":"<p>Unlike regular functions, special forms control when and if their arguments are evaluated:</p> Special Form Evaluation Pattern <code>def</code> Evaluate value, don't evaluate variable name <code>lambda</code> Don't evaluate parameters or body <code>if</code> Evaluate condition, then only one branch <code>let</code> Evaluate bindings, then body in new scope <code>try</code> Evaluate body, then handler only on error <code>do</code> Evaluate all arguments in sequence <code>quote</code>/<code>@</code> Don't evaluate argument at all <code>host</code> Evaluate all arguments"},{"location":"language/special-forms/#environment-interaction","title":"Environment Interaction","text":"<p>Special forms interact with the environment in specific ways:</p> <pre><code>// def modifies environment\n[\"do\",\n  [\"def\", \"x\", 10],        // Adds x=10 to environment\n  [\"def\", \"y\", [\"*\", \"x\", 2]], // Uses x from environment, adds y=20\n  [\"+\", \"x\", \"y\"]]         // Uses both x and y: result 30\n\n// lambda captures environment\n[\"do\",\n  [\"def\", \"base\", 100],\n  [\"def\", \"adder\", [\"lambda\", [\"n\"], [\"+\", \"n\", \"base\"]]],\n  [\"adder\", 23]]           // Result: 123 (uses captured base=100)\n</code></pre>"},{"location":"language/special-forms/#meta-programming-with-special-forms","title":"Meta-Programming with Special Forms","text":""},{"location":"language/special-forms/#code-generation","title":"Code Generation","text":"<pre><code>// Generate conditional code\n[\"def\", \"make_comparator\", \n  [\"lambda\", [\"op\"], \n    [\"@\", [\"lambda\", [\"a\", \"b\"], [\"op\", \"a\", \"b\"]]]]]\n\n// Usage\n[\"def\", \"greater_than\", [\"make_comparator\", \"&gt;\"]]\n[\"greater_than\", 5, 3]  // Result: true\n</code></pre>"},{"location":"language/special-forms/#dynamic-function-creation","title":"Dynamic Function Creation","text":"<pre><code>// Create functions with varying parameter counts\n[\"def\", \"make_n_ary_function\",\n  [\"lambda\", [\"params\", \"body\"],\n    [\"list\", \"@lambda\", \"params\", \"body\"]]]\n\n[\"def\", \"triple_add\", \n  [\"make_n_ary_function\", \n    [\"@\", [\"a\", \"b\", \"c\"]], \n    [\"@\", [\"+\", [\"+\", \"a\", \"b\"], \"c\"]]]]\n</code></pre>"},{"location":"language/special-forms/#macro-like-patterns","title":"Macro-like Patterns","text":"<pre><code>// Define a \"when\" macro-like construct\n[\"def\", \"when\",\n  [\"lambda\", [\"condition\", \"action\"],\n    [\"if\", \"condition\", \"action\", null]]]\n\n// Usage\n[\"when\", [\"&gt;\", \"temperature\", 30], \n  [\"host\", \"log\", \"@It's hot outside!\"]]\n</code></pre>"},{"location":"language/special-forms/#advanced-special-form-usage","title":"Advanced Special Form Usage","text":""},{"location":"language/special-forms/#combining-special-forms","title":"Combining Special Forms","text":"<pre><code>// Complex initialization pattern\n[\"do\",\n  [\"def\", \"config\", [\"host\", \"file/read\", \"config.json\"]],\n  [\"def\", \"database\", \n    [\"if\", [\"get\", \"config\", \"use_database\"],\n      [\"host\", \"db/connect\", [\"get\", \"config\", \"db_url\"]],\n      null]],\n  [\"def\", \"processor\",\n    [\"lambda\", [\"data\"],\n      [\"if\", \"database\",\n        [\"host\", \"db/store\", \"database\", \"data\"],\n        [\"host\", \"log\", \"@No database configured\"]]]],\n  \"processor\"]\n</code></pre>"},{"location":"language/special-forms/#error-handling-patterns","title":"Error Handling Patterns","text":"<pre><code>// Safe evaluation with fallback\n[\"def\", \"safe_eval\",\n  [\"lambda\", [\"expr\", \"fallback\"],\n    [\"if\", [\"try\", \"expr\"],\n      \"expr\",\n      \"fallback\"]]]\n\n// Conditional resource acquisition\n[\"def\", \"with_resource\",\n  [\"lambda\", [\"resource_id\", \"action\"],\n    [\"do\",\n      [\"def\", \"resource\", [\"host\", \"resource/acquire\", \"resource_id\"]],\n      [\"if\", \"resource\",\n        [\"do\",\n          [\"def\", \"result\", [\"action\", \"resource\"]],\n          [\"host\", \"resource/release\", \"resource\"],\n          \"result\"],\n        null]]]]\n</code></pre>"},{"location":"language/special-forms/#special-forms-vs-functions","title":"Special Forms vs Functions","text":""},{"location":"language/special-forms/#key-differences","title":"Key Differences","text":"Aspect Special Forms Functions Argument Evaluation Controlled by form All arguments evaluated Environment Access Can modify environment Read-only environment access Evaluation Order Form-specific rules Standard left-to-right Meta-Programming Enable code generation Operate on values only Syntax Extension Can create new syntax Cannot extend syntax"},{"location":"language/special-forms/#when-to-use-each","title":"When to Use Each","text":"<p>Use Special Forms for: - Control flow (<code>if</code>, <code>do</code>) - Variable binding (<code>def</code>, <code>let</code>) - Function creation (<code>lambda</code>) - Meta-programming (<code>quote</code>) - Host interaction (<code>host</code>) - Error handling (<code>try</code>)</p> <p>Use Functions for: - Data transformation - Mathematical operations - String processing - Collection manipulation - Business logic - JSON object construction (using JSL's first-class object support)</p>"},{"location":"language/special-forms/#implementation-notes","title":"Implementation Notes","text":""},{"location":"language/special-forms/#evaluation-context","title":"Evaluation Context","text":"<p>Special forms are evaluated in the context of JSL's evaluator, which maintains:</p> <ol> <li>Environment Stack: For variable resolution and binding</li> <li>Continuation Stack: For function calls and returns</li> <li>Host Interface: For JHIP command execution</li> <li>Error Handling: For exception propagation</li> </ol>"},{"location":"language/special-forms/#performance-considerations","title":"Performance Considerations","text":"<ul> <li><code>def</code>: O(1) environment binding</li> <li><code>let</code>: O(1) local binding</li> <li><code>try</code>: O(n) body evaluation, O(m) handler evaluation on error</li> <li><code>lambda</code>: O(1) closure creation, O(e) environment capture</li> <li><code>if</code>: O(1) branch selection, avoids evaluating unused branch  </li> <li><code>do</code>: O(n) sequential evaluation</li> <li><code>quote</code>: O(1) literal return</li> <li><code>host</code>: O(h) depends on host operation complexity</li> </ul> <p>Special forms are the foundation of JSL's expressiveness, providing the essential building blocks for all higher-level language constructs while maintaining the language's homoiconic JSON-based structure.</p>"},{"location":"language/special-forms/#special-form-details","title":"Special Form Details","text":""},{"location":"language/special-forms/#host","title":"<code>host</code>","text":"<p>The <code>host</code> special form is the gateway for all side effects and interactions with the host system.</p> <ul> <li>Syntax: <code>[\"host\", command_expr, arg1_expr, ...]</code></li> <li>Evaluation: All arguments are evaluated. The results are packaged into a JHIP request and yielded to the host runtime.</li> </ul>"},{"location":"language/special-forms/#json-objects-as-first-class-citizens","title":"JSON Objects as First-Class Citizens","text":"<p>JSL provides powerful support for JSON object construction through its first-class object syntax. Objects in JSL:</p> <ul> <li>Are always treated as data structures (never function calls)</li> <li>Use normal JSL evaluation rules for both keys and values</li> <li>Require keys to evaluate to strings</li> <li>Support dynamic construction with variables and expressions</li> </ul> <p>For example: <pre><code>[\"do\",\n  [\"def\", \"name\", \"@Alice\"],\n  [\"def\", \"age\", 30],\n  {\"@greeting\": [\"str-concat\", \"@Hello \", \"name\"],\n   \"@info\": {\"@name\": \"name\", \"@age\": \"age\"}}\n]\n</code></pre></p> <p>For more details, see JSON Objects as First-Class Citizens.</p>"},{"location":"tutorials/data/","title":"Working with Data in JSL","text":""},{"location":"tutorials/data/#introduction","title":"Introduction","text":"<p>JSL uses JSON for all data structures, making it easy to work with familiar formats. This tutorial teaches you to manipulate data step by step.</p>"},{"location":"tutorials/data/#basic-data-types","title":"Basic Data Types","text":"<p>JSL supports all JSON data types:</p> <pre><code>[\"do\",\n  [\"def\", \"number\", 42],\n  [\"def\", \"string\", \"hello\"],\n  [\"def\", \"boolean\", true],\n  [\"def\", \"null_value\", null],\n  [\"def\", \"array\", [1, 2, 3]],\n  [\"def\", \"object\", {\"name\": \"Alice\", \"age\": 30}]]\n</code></pre>"},{"location":"tutorials/data/#working-with-objects","title":"Working with Objects","text":""},{"location":"tutorials/data/#accessing-object-properties","title":"Accessing Object Properties","text":"<pre><code>[\"def\", \"person\", {\"name\": \"Alice\", \"age\": 30, \"city\": \"New York\"}]\n\n[\"get\", \"person\", \"name\"]     // Result: \"Alice\"\n[\"get\", \"person\", \"age\"]      // Result: 30\n</code></pre>"},{"location":"tutorials/data/#modifying-objects","title":"Modifying Objects","text":"<pre><code>[\"def\", \"updated_person\", \n  [\"assoc\", \"person\", \"age\", 31]]\n// Result: {\"name\": \"Alice\", \"age\": 31, \"city\": \"New York\"}\n</code></pre>"},{"location":"tutorials/data/#adding-new-properties","title":"Adding New Properties","text":"<pre><code>[\"def\", \"person_with_email\",\n  [\"assoc\", \"person\", \"email\", \"alice@example.com\"]]\n</code></pre>"},{"location":"tutorials/data/#working-with-arrays","title":"Working with Arrays","text":""},{"location":"tutorials/data/#basic-array-operations","title":"Basic Array Operations","text":"<pre><code>[\"def\", \"numbers\", [1, 2, 3, 4, 5]]\n\n[\"length\", \"numbers\"]              // Result: 5\n[\"first\", \"numbers\"]               // Result: 1\n[\"last\", \"numbers\"]                // Result: 5\n[\"nth\", \"numbers\", 2]              // Result: 3 (0-indexed)\n</code></pre>"},{"location":"tutorials/data/#adding-elements","title":"Adding Elements","text":"<pre><code>[\"conj\", \"numbers\", 6]             // Result: [1, 2, 3, 4, 5, 6]\n[\"concat\", \"numbers\", [6, 7, 8]]   // Result: [1, 2, 3, 4, 5, 6, 7, 8]\n</code></pre>"},{"location":"tutorials/data/#step-by-step-building-a-contact-manager","title":"Step-by-Step: Building a Contact Manager","text":""},{"location":"tutorials/data/#step-1-create-contact-data","title":"Step 1: Create Contact Data","text":"<pre><code>[\"def\", \"contacts\", [\n  {\"name\": \"Alice\", \"email\": \"alice@example.com\", \"phone\": \"555-0101\"},\n  {\"name\": \"Bob\", \"email\": \"bob@example.com\", \"phone\": \"555-0102\"},\n  {\"name\": \"Charlie\", \"email\": \"charlie@example.com\", \"phone\": \"555-0103\"}\n]]\n</code></pre>"},{"location":"tutorials/data/#step-2-find-a-contact-by-name","title":"Step 2: Find a Contact by Name","text":"<pre><code>[\"def\", \"find_contact\",\n  [\"lambda\", [\"name\"],\n    [\"first\", \n      [\"filter\", \n        [\"lambda\", [\"contact\"], [\"=\", [\"get\", \"contact\", \"name\"], \"name\"]], \n        \"contacts\"]]]]\n\n[\"find_contact\", \"Alice\"]\n// Result: {\"name\": \"Alice\", \"email\": \"alice@example.com\", \"phone\": \"555-0101\"}\n</code></pre>"},{"location":"tutorials/data/#step-3-get-all-email-addresses","title":"Step 3: Get All Email Addresses","text":"<pre><code>[\"def\", \"get_all_emails\",\n  [\"lambda\", [], \n    [\"map\", [\"lambda\", [\"contact\"], [\"get\", \"contact\", \"email\"]], \"contacts\"]]]\n\n[\"get_all_emails\"]\n// Result: [\"alice@example.com\", \"bob@example.com\", \"charlie@example.com\"]\n</code></pre>"},{"location":"tutorials/data/#step-4-add-a-new-contact","title":"Step 4: Add a New Contact","text":"<pre><code>[\"def\", \"add_contact\",\n  [\"lambda\", [\"name\", \"email\", \"phone\"],\n    [\"conj\", \"contacts\", {\"name\": \"name\", \"email\": \"email\", \"phone\": \"phone\"}]]]\n\n[\"def\", \"updated_contacts\", \n  [\"add_contact\", \"Diana\", \"diana@example.com\", \"555-0104\"]]\n</code></pre>"},{"location":"tutorials/data/#data-transformation-patterns","title":"Data Transformation Patterns","text":""},{"location":"tutorials/data/#filtering-data","title":"Filtering Data","text":"<pre><code>// Find contacts with Gmail addresses\n[\"def\", \"gmail_contacts\",\n  [\"filter\", \n    [\"lambda\", [\"contact\"], \n      [\"includes?\", [\"get\", \"contact\", \"email\"], \"gmail.com\"]], \n    \"contacts\"]]\n</code></pre>"},{"location":"tutorials/data/#grouping-data","title":"Grouping Data","text":"<pre><code>// Group contacts by email domain\n[\"def\", \"group_by_domain\",\n  [\"group_by\", \n    [\"lambda\", [\"contact\"], \n      [\"last\", [\"split\", [\"get\", \"contact\", \"email\"], \"@\"]]], \n    \"contacts\"]]\n</code></pre>"},{"location":"tutorials/data/#sorting-data","title":"Sorting Data","text":"<pre><code>// Sort contacts by name\n[\"def\", \"sorted_contacts\",\n  [\"sort_by\", [\"lambda\", [\"contact\"], [\"get\", \"contact\", \"name\"]], \"contacts\"]]\n</code></pre>"},{"location":"tutorials/data/#working-with-nested-data","title":"Working with Nested Data","text":""},{"location":"tutorials/data/#step-1-complex-data-structure","title":"Step 1: Complex Data Structure","text":"<pre><code>[\"def\", \"company\", {\n  \"name\": \"Tech Corp\",\n  \"departments\": [\n    {\n      \"name\": \"Engineering\", \n      \"employees\": [\n        {\"name\": \"Alice\", \"salary\": 100000},\n        {\"name\": \"Bob\", \"salary\": 95000}\n      ]\n    },\n    {\n      \"name\": \"Sales\",\n      \"employees\": [\n        {\"name\": \"Charlie\", \"salary\": 80000},\n        {\"name\": \"Diana\", \"salary\": 85000}\n      ]\n    }\n  ]\n}]\n</code></pre>"},{"location":"tutorials/data/#step-2-extract-all-employee-names","title":"Step 2: Extract All Employee Names","text":"<pre><code>[\"def\", \"all_employee_names\",\n  [\"flatten\", \n    [\"map\", \n      [\"lambda\", [\"dept\"], \n        [\"map\", \n          [\"lambda\", [\"emp\"], [\"get\", \"emp\", \"name\"]], \n          [\"get\", \"dept\", \"employees\"]]], \n      [\"get\", \"company\", \"departments\"]]]]\n\n[\"all_employee_names\"]\n// Result: [\"Alice\", \"Bob\", \"Charlie\", \"Diana\"]\n</code></pre>"},{"location":"tutorials/data/#step-3-calculate-total-payroll","title":"Step 3: Calculate Total Payroll","text":"<pre><code>[\"def\", \"total_payroll\",\n  [\"sum\", \n    [\"flatten\", \n      [\"map\", \n        [\"lambda\", [\"dept\"], \n          [\"map\", \n            [\"lambda\", [\"emp\"], [\"get\", \"emp\", \"salary\"]], \n            [\"get\", \"dept\", \"employees\"]]], \n        [\"get\", \"company\", \"departments\"]]]]]\n\n[\"total_payroll\"]\n// Result: 360000\n</code></pre>"},{"location":"tutorials/data/#data-validation","title":"Data Validation","text":""},{"location":"tutorials/data/#step-1-validation-functions","title":"Step 1: Validation Functions","text":"<pre><code>[\"def\", \"valid_email?\",\n  [\"lambda\", [\"email\"], \n    [\"and\", \n      [\"includes?\", \"email\", \"@\"],\n      [\"&gt;\", [\"length\", \"email\"], 5]]]]\n\n[\"def\", \"valid_phone?\",\n  [\"lambda\", [\"phone\"],\n    [\"=\", [\"length\", \"phone\"], 12]]]  // Assuming XXX-XXXX format\n</code></pre>"},{"location":"tutorials/data/#step-2-validate-contact","title":"Step 2: Validate Contact","text":"<pre><code>[\"def\", \"valid_contact?\",\n  [\"lambda\", [\"contact\"],\n    [\"and\",\n      [\"valid_email?\", [\"get\", \"contact\", \"email\"]],\n      [\"valid_phone?\", [\"get\", \"contact\", \"phone\"]],\n      [\"&gt;\", [\"length\", [\"get\", \"contact\", \"name\"]], 0]]]]\n</code></pre>"},{"location":"tutorials/data/#step-3-filter-valid-contacts","title":"Step 3: Filter Valid Contacts","text":"<pre><code>[\"def\", \"valid_contacts\",\n  [\"filter\", \"valid_contact?\", \"contacts\"]]\n</code></pre>"},{"location":"tutorials/data/#dynamic-object-construction-with-data","title":"Dynamic Object Construction with Data","text":""},{"location":"tutorials/data/#step-1-email-object-structure","title":"Step 1: Email Object Structure","text":"<pre><code>[\"def\", \"create_email\", \n  [\"lambda\", [\"recipient_email\", \"recipient_name\"],\n    {\n      \"@to\": \"recipient_email\",\n      \"@subject\": [\"str-concat\", \"@Welcome \", \"recipient_name\", \"@!\"],\n      \"@body\": [\"str-concat\", \"@Hello \", \"recipient_name\", \"@, welcome to our service!\"]\n    }\n  ]\n]\n</code></pre>"},{"location":"tutorials/data/#step-2-generate-emails-for-all-contacts","title":"Step 2: Generate Emails for All Contacts","text":"<pre><code>[\"def\", \"generate_welcome_emails\",\n  [\"map\", \n    [\"lambda\", [\"contact\"],\n      [\"create_email\",\n        [\"get\", \"contact\", \"@email\"],\n        [\"get\", \"contact\", \"@name\"]\n      ]], \n    \"contacts\"]]\n</code></pre>"},{"location":"tutorials/data/#practice-exercises","title":"Practice Exercises","text":""},{"location":"tutorials/data/#exercise-1-inventory-management","title":"Exercise 1: Inventory Management","text":"<p>Create functions to manage a product inventory:</p> <pre><code>[\"def\", \"inventory\", [\n  {\"id\": 1, \"name\": \"Laptop\", \"price\": 999, \"stock\": 5},\n  {\"id\": 2, \"name\": \"Mouse\", \"price\": 25, \"stock\": 50},\n  {\"id\": 3, \"name\": \"Keyboard\", \"price\": 75, \"stock\": 20}\n]]\n\n// Find products under $100\n// Calculate total inventory value\n// Find products with low stock (&lt; 10)\n</code></pre>"},{"location":"tutorials/data/#exercise-2-student-grades","title":"Exercise 2: Student Grades","text":"<p>Work with student grade data:</p> <pre><code>[\"def\", \"students\", [\n  {\"name\": \"Alice\", \"grades\": [85, 92, 78, 96]},\n  {\"name\": \"Bob\", \"grades\": [76, 84, 91, 88]},\n  {\"name\": \"Charlie\", \"grades\": [92, 95, 89, 94]}\n]]\n\n// Calculate average grade for each student\n// Find the student with the highest average\n// List all grades above 90\n</code></pre>"},{"location":"tutorials/data/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about JSON Objects as first-class data structures</li> <li>Explore functions for data processing</li> <li>Try distributed computing with data</li> </ul> <p>Working with data in JSL is straightforward because everything is JSON. The functional approach with <code>map</code>, <code>filter</code>, and <code>reduce</code> makes data transformation both powerful and readable.</p>"},{"location":"tutorials/first-program/","title":"Your First JSL Program","text":"<p>Welcome to JSL! This tutorial will walk you through creating your first JSL program step by step. By the end, you'll understand JSL's core concepts and be ready to build more complex applications.</p>"},{"location":"tutorials/first-program/#what-makes-jsl-different","title":"What Makes JSL Different","text":"<p>JSL is unlike most programming languages you may have used before. The key insight is that code and data are the same thing - both are represented as JSON. This means:</p> <ul> <li>Your program is valid JSON that can be transmitted over networks</li> <li>Functions can be serialized and reconstructed anywhere  </li> <li>No compilation step - JSON is the native format</li> <li>Universal compatibility - any system that handles JSON can run JSL</li> </ul>"},{"location":"tutorials/first-program/#hello-world","title":"Hello, World!","text":"<p>Let's start with the classic first program. Create a file called <code>hello.jsl</code>:</p> <pre><code>[\"print\", \"@Hello, JSL!\"]\n</code></pre> <p>Now, run it from your terminal:</p> <pre><code>jsl hello.jsl\n</code></pre> <p>You should see the output:</p> <pre><code>Hello, JSL!\n</code></pre> <p>What happened?</p> <ol> <li><code>[\"print\", \"Hello, JSL!\"]</code> is a function call </li> <li><code>\"print\"</code> is the function name (a built-in function)</li> <li><code>\"Hello, JSL!\"</code> is the argument</li> <li>JSL evaluates the expression and calls the print function</li> </ol>"},{"location":"tutorials/first-program/#understanding-prefix-notation","title":"Understanding Prefix Notation","text":"<p>JSL uses prefix notation - the operator comes first:</p> <pre><code>// Traditional: 2 + 3\n[\"+\", 2, 3]\n\n// Traditional: 2 + 3 + 4  \n[\"+\", 2, 3, 4]\n\n// Traditional: 2 * (3 + 4)\n[\"*\", 2, [\"+\", 3, 4]]\n</code></pre> <p>Try it:</p> <pre><code>[\"print\", \"2 + 3 =\", [\"+\", 2, 3]]\n</code></pre>"},{"location":"tutorials/first-program/#variables-with-def","title":"Variables with <code>def</code>","text":"<p>Use <code>def</code> to create variables:</p> <pre><code>[\n  \"do\",\n  [\"def\", \"name\", \"Alice\"],\n  [\"def\", \"age\", 30],\n  [\"print\", \"Hello,\", \"name\", \"! You are\", \"age\", \"years old.\"]\n]\n</code></pre> <p>Breaking it down:</p> <ol> <li><code>\"do\"</code> executes multiple expressions in sequence</li> <li><code>[\"def\", \"name\", \"Alice\"]</code> creates a variable called <code>name</code></li> <li><code>[\"def\", \"age\", 30]</code> creates a variable called <code>age</code> </li> <li>The print statement uses the variables by referencing their names</li> </ol>"},{"location":"tutorials/first-program/#your-first-function","title":"Your First Function","text":"<p>Let's create a function to calculate the area of a circle:</p> <pre><code>[\n  \"do\",\n  [\"def\", \"pi\", 3.14159],\n  [\"def\", \"circle-area\", \n   [\"lambda\", [\"radius\"], \n    [\"*\", \"pi\", \"radius\", \"radius\"]]],\n  [\"def\", \"my-radius\", 5],\n  [\"def\", \"area\", [\"circle-area\", \"my-radius\"]],\n  [\"print\", \"Circle with radius\", \"my-radius\", \"has area\", \"area\"]\n]\n</code></pre> <p>Understanding <code>lambda</code>:</p> <ul> <li><code>[\"lambda\", [\"radius\"], ...]</code> creates a function</li> <li><code>[\"radius\"]</code> is the parameter list (the function takes one argument)</li> <li><code>[\"*\", \"pi\", \"radius\", \"radius\"]</code> is the function body</li> <li>The function calculates \u03c0 \u00d7 radius\u00b2</li> </ul>"},{"location":"tutorials/first-program/#working-with-lists","title":"Working with Lists","text":"<p>Lists are fundamental in JSL. Let's explore list operations:</p> <pre><code>[\n  \"do\",\n  [\"def\", \"numbers\", [\"list\", 1, 2, 3, 4, 5]],\n  [\"def\", \"first-number\", [\"first\", \"numbers\"]],\n  [\"def\", \"rest-numbers\", [\"rest\", \"numbers\"]],\n  [\"def\", \"list-length\", [\"length\", \"numbers\"]],\n\n  [\"print\", \"Original list:\", \"numbers\"],\n  [\"print\", \"First element:\", \"first-number\"], \n  [\"print\", \"Rest of list:\", \"rest-numbers\"],\n  [\"print\", \"List length:\", \"list-length\"]\n]\n</code></pre>"},{"location":"tutorials/first-program/#higher-order-functions","title":"Higher-Order Functions","text":"<p>Now for something powerful - functions that work with other functions:</p> <pre><code>[\n  \"do\",\n  [\"def\", \"numbers\", [\"list\", 1, 2, 3, 4, 5]],\n\n  // Double each number\n  [\"def\", \"double\", [\"lambda\", [\"x\"], [\"*\", \"x\", 2]]],\n  [\"def\", \"doubled\", [\"map\", \"double\", \"numbers\"]],\n\n  // Filter even numbers\n  [\"def\", \"is-even\", [\"lambda\", [\"n\"], [\"=\", [\"mod\", \"n\", 2], 0]]],\n  [\"def\", \"evens\", [\"filter\", \"is-even\", \"numbers\"]],\n\n  // Sum all numbers\n  [\"def\", \"total\", [\"reduce\", \"+\", \"numbers\", 0]],\n\n  [\"print\", \"Original:\", \"numbers\"],\n  [\"print\", \"Doubled:\", \"doubled\"],\n  [\"print\", \"Evens only:\", \"evens\"], \n  [\"print\", \"Sum:\", \"total\"]\n]\n</code></pre> <p>Key concepts:</p> <ul> <li><code>map</code> applies a function to each element of a list</li> <li><code>filter</code> keeps only elements that match a condition</li> <li><code>reduce</code> combines all elements into a single value</li> </ul>"},{"location":"tutorials/first-program/#conditional-logic","title":"Conditional Logic","text":"<p>Use <code>if</code> for decisions:</p> <pre><code>[\n  \"do\",\n  [\"def\", \"temperature\", 75],\n  [\"def\", \"weather\", \n   [\"if\", [\"&gt;\", \"temperature\", 80],\n    \"hot\",\n    [\"if\", [\"&gt;\", \"temperature\", 60], \n     \"warm\", \n     \"cool\"]]],\n  [\"print\", \"It's\", \"weather\", \"today at\", \"temperature\", \"degrees\"]\n]\n</code></pre>"},{"location":"tutorials/first-program/#data-structures","title":"Data Structures","text":"<p>Work with dictionaries (objects) to structure data:</p> <pre><code>[\n  \"do\",\n  [\"def\", \"person\", {\n    \"name\": \"Bob\",\n    \"age\": 25,\n    \"city\": \"San Francisco\"\n  }],\n\n  [\"def\", \"name\", [\"get\", \"person\", \"name\"]],\n  [\"def\", \"age\", [\"get\", \"person\", \"age\"]],\n\n  // Create a new person with updated age\n  [\"def\", \"older-person\", [\"set\", \"person\", \"age\", [\"+\", \"age\", 1]]],\n\n  [\"print\", \"Original person:\", \"person\"],\n  [\"print\", \"Person next year:\", \"older-person\"]\n]\n</code></pre>"},{"location":"tutorials/first-program/#putting-it-together-a-complete-example","title":"Putting It Together: A Complete Example","text":"<p>Let's build a program that processes a list of people:</p> <pre><code>[\n  \"do\",\n\n  // Sample data\n  [\"def\", \"people\", [\n    {\"name\": \"Alice\", \"age\": 30, \"city\": \"NYC\"},\n    {\"name\": \"Bob\", \"age\": 25, \"city\": \"SF\"}, \n    {\"name\": \"Charlie\", \"age\": 35, \"city\": \"NYC\"},\n    {\"name\": \"Diana\", \"age\": 28, \"city\": \"LA\"}\n  ]],\n\n  // Helper functions\n  [\"def\", \"get-name\", [\"lambda\", [\"person\"], [\"get\", \"person\", \"name\"]]],\n  [\"def\", \"get-age\", [\"lambda\", [\"person\"], [\"get\", \"person\", \"age\"]]],\n  [\"def\", \"is-adult\", [\"lambda\", [\"person\"], [\"&gt;=\", [\"get-age\", \"person\"], 18]]],\n  [\"def\", \"lives-in-nyc\", [\"lambda\", [\"person\"], [\"=\", [\"get\", \"person\", \"city\"], \"NYC\"]]],\n\n  // Process the data\n  [\"def\", \"adults\", [\"filter\", \"is-adult\", \"people\"]],\n  [\"def\", \"nyc-adults\", [\"filter\", \"lives-in-nyc\", \"adults\"]],\n  [\"def\", \"nyc-names\", [\"map\", \"get-name\", \"nyc-adults\"]],\n  [\"def\", \"average-age\", \n   [\"/\", [\"reduce\", \"+\", [\"map\", \"get-age\", \"adults\"], 0], [\"length\", \"adults\"]]],\n\n  // Output results\n  [\"print\", \"All people:\", [\"map\", \"get-name\", \"people\"]],\n  [\"print\", \"Adults in NYC:\", \"nyc-names\"],\n  [\"print\", \"Average age of adults:\", \"average-age\"]\n]\n</code></pre> <p>This program demonstrates:</p> <ul> <li>Working with structured data (lists and dictionaries)</li> <li>Creating helper functions for common operations</li> <li>Chaining operations together (filter, then map)</li> <li>Computing aggregates (average age)</li> </ul>"},{"location":"tutorials/first-program/#what-youve-learned","title":"What You've Learned","text":"<p>Congratulations! You now understand:</p> <ol> <li>Prefix notation - operators come first</li> <li>Variables - using <code>def</code> to bind values to names</li> <li>Functions - creating them with <code>lambda</code></li> <li>Lists and dictionaries - fundamental data structures</li> <li>Higher-order functions - <code>map</code>, <code>filter</code>, <code>reduce</code></li> <li>Conditional logic - making decisions with <code>if</code></li> <li>JSON structure - how code and data are the same</li> </ol>"},{"location":"tutorials/first-program/#next-steps","title":"Next Steps","text":"<p>Ready to learn more? Try these tutorials:</p> <ul> <li>Working with Functions - Advanced function concepts</li> <li>Data Manipulation - Complex data processing patterns</li> <li>Code Serialization - Sending code over networks</li> <li>Distributed Computing - Building distributed applications</li> </ul>"},{"location":"tutorials/first-program/#practice-exercises","title":"Practice Exercises","text":"<p>Try building these programs yourself:</p> <ol> <li> <p>FizzBuzz: Print numbers 1-100, but \"Fizz\" for multiples of 3, \"Buzz\" for multiples of 5, and \"FizzBuzz\" for multiples of both.</p> </li> <li> <p>Word Counter: Given a list of words, count how many times each word appears.</p> </li> <li> <p>Temperature Converter: Create functions to convert between Celsius and Fahrenheit.</p> </li> <li> <p>Shopping Cart: Calculate the total price of items in a shopping cart, including tax.</p> </li> </ol> <p>Ready to tackle these? You have all the tools you need!</p>"},{"location":"tutorials/functions/","title":"Learning Functions in JSL","text":""},{"location":"tutorials/functions/#introduction","title":"Introduction","text":"<p>Functions are the building blocks of JSL programs. In this tutorial, you'll learn to create, use, and combine functions through hands-on examples.</p>"},{"location":"tutorials/functions/#your-first-function","title":"Your First Function","text":"<p>Let's start with the simplest possible function:</p> <pre><code>[\"lambda\", [\"x\"], \"x\"]\n</code></pre> <p>This is the identity function - it returns whatever you give it. Try it:</p> <pre><code>[[\"lambda\", [\"x\"], \"x\"], \"hello\"]\n// Result: \"hello\"\n</code></pre>"},{"location":"tutorials/functions/#naming-functions","title":"Naming Functions","text":"<p>Usually, you'll want to give functions names:</p> <pre><code>[\"def\", \"identity\", [\"lambda\", [\"x\"], \"x\"]]\n</code></pre> <p>Now you can use it by name:</p> <pre><code>[\"identity\", \"hello\"]\n// Result: \"hello\"\n</code></pre>"},{"location":"tutorials/functions/#functions-with-multiple-parameters","title":"Functions with Multiple Parameters","text":"<pre><code>[\"def\", \"add\", [\"lambda\", [\"a\", \"b\"], [\"+\", \"a\", \"b\"]]]\n[\"add\", 3, 7]\n// Result: 10\n</code></pre>"},{"location":"tutorials/functions/#step-by-step-building-a-math-library","title":"Step-by-Step: Building a Math Library","text":""},{"location":"tutorials/functions/#step-1-basic-operations","title":"Step 1: Basic Operations","text":"<pre><code>[\"do\",\n  [\"def\", \"square\", [\"lambda\", [\"x\"], [\"*\", \"x\", \"x\"]]],\n  [\"def\", \"double\", [\"lambda\", [\"x\"], [\"*\", \"x\", 2]]],\n  [\"def\", \"half\", [\"lambda\", [\"x\"], [\"/\", \"x\", 2]]]]\n</code></pre>"},{"location":"tutorials/functions/#step-2-test-your-functions","title":"Step 2: Test Your Functions","text":"<pre><code>[\"square\", 5]    // Result: 25\n[\"double\", 5]    // Result: 10  \n[\"half\", 10]     // Result: 5\n</code></pre>"},{"location":"tutorials/functions/#step-3-combining-functions","title":"Step 3: Combining Functions","text":"<pre><code>[\"def\", \"square_and_double\", \n  [\"lambda\", [\"x\"], [\"double\", [\"square\", \"x\"]]]]\n\n[\"square_and_double\", 3]\n// 3 \u2192 square \u2192 9 \u2192 double \u2192 18\n</code></pre>"},{"location":"tutorials/functions/#higher-order-functions","title":"Higher-Order Functions","text":"<p>Functions that work with other functions:</p>"},{"location":"tutorials/functions/#step-1-a-function-that-applies-another-function-twice","title":"Step 1: A Function That Applies Another Function Twice","text":"<pre><code>[\"def\", \"twice\", \n  [\"lambda\", [\"f\", \"x\"], [\"f\", [\"f\", \"x\"]]]]\n</code></pre>"},{"location":"tutorials/functions/#step-2-use-it","title":"Step 2: Use It","text":"<pre><code>[\"twice\", \"double\", 5]\n// 5 \u2192 double \u2192 10 \u2192 double \u2192 20\n</code></pre>"},{"location":"tutorials/functions/#working-with-lists","title":"Working with Lists","text":""},{"location":"tutorials/functions/#step-1-processing-each-item","title":"Step 1: Processing Each Item","text":"<pre><code>[\"def\", \"numbers\", [1, 2, 3, 4, 5]]\n[\"map\", \"square\", \"numbers\"]\n// Result: [1, 4, 9, 16, 25]\n</code></pre>"},{"location":"tutorials/functions/#step-2-filtering-lists","title":"Step 2: Filtering Lists","text":"<pre><code>[\"def\", \"is_even\", [\"lambda\", [\"x\"], [\"=\", [\"mod\", \"x\", 2], 0]]]\n[\"filter\", \"is_even\", \"numbers\"]\n// Result: [2, 4]\n</code></pre>"},{"location":"tutorials/functions/#step-3-combining-operations","title":"Step 3: Combining Operations","text":"<pre><code>[\"def\", \"sum_of_squares_of_evens\",\n  [\"lambda\", [\"numbers\"],\n    [\"sum\", [\"map\", \"square\", [\"filter\", \"is_even\", \"numbers\"]]]]]\n\n[\"sum_of_squares_of_evens\", [1, 2, 3, 4, 5]]\n// [1,2,3,4,5] \u2192 filter evens \u2192 [2,4] \u2192 square \u2192 [4,16] \u2192 sum \u2192 20\n</code></pre>"},{"location":"tutorials/functions/#closures-functions-that-remember","title":"Closures: Functions That Remember","text":"<pre><code>[\"def\", \"make_adder\", \n  [\"lambda\", [\"n\"], \n    [\"lambda\", [\"x\"], [\"+\", \"x\", \"n\"]]]]\n\n[\"def\", \"add_10\", [\"make_adder\", 10]]\n[\"add_10\", 5]\n// Result: 15\n</code></pre> <p>The inner function \"remembers\" the value of <code>n</code> (10) even after <code>make_adder</code> finishes.</p>"},{"location":"tutorials/functions/#practice-exercises","title":"Practice Exercises","text":""},{"location":"tutorials/functions/#exercise-1-temperature-converter","title":"Exercise 1: Temperature Converter","text":"<p>Create functions to convert between Celsius and Fahrenheit:</p> <pre><code>// Your solution here\n[\"def\", \"celsius_to_fahrenheit\", [\"lambda\", [\"c\"], ...]]\n[\"def\", \"fahrenheit_to_celsius\", [\"lambda\", [\"f\"], ...]]\n</code></pre> Solution <pre><code>[\"do\",\n  [\"def\", \"celsius_to_fahrenheit\", \n    [\"lambda\", [\"c\"], [\"+\", [\"*\", \"c\", 9/5], 32]]],\n  [\"def\", \"fahrenheit_to_celsius\", \n    [\"lambda\", [\"f\"], [\"*\", [\"-\", \"f\", 32], 5/9]]]]\n</code></pre>"},{"location":"tutorials/functions/#exercise-2-list-statistics","title":"Exercise 2: List Statistics","text":"<p>Create a function that returns statistics about a list of numbers:</p> <pre><code>// Should return: {\"min\": 1, \"max\": 5, \"avg\": 3, \"count\": 5}\n[\"stats\", [1, 2, 3, 4, 5]]\n</code></pre> Solution <pre><code>[\"def\", \"stats\",\n  [\"lambda\", [\"numbers\"],\n    {\n      \"min\": [\"min\", \"numbers\"],\n      \"max\": [\"max\", \"numbers\"], \n      \"avg\": [\"/\", [\"sum\", \"numbers\"], [\"length\", \"numbers\"]],\n      \"count\": [\"length\", \"numbers\"]\n    }]]\n</code></pre>"},{"location":"tutorials/functions/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about working with data</li> <li>Explore JSON Objects as first-class citizens</li> <li>Try distributed computing</li> </ul> <p>Functions in JSL are powerful and flexible. With closures and higher-order functions, you can build complex programs from simple, composable pieces.</p>"}]}